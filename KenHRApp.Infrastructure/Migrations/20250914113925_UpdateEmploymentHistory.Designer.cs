// <auto-generated />
using System;
using KenHRApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KenHRApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914113925_UpdateEmploymentHistory")]
    partial class UpdateEmploymentHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("kenuser")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KenHRApp.Domain.Entities.DepartmentMaster", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2025, 9, 14, 11, 39, 25, 46, DateTimeKind.Utc).AddTicks(4091));

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("GroupCode")
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("ManagerEmpNo")
                        .HasColumnType("int")
                        .HasComment("Part of composite unique key index");

                    b.Property<int?>("ParentDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("SuperintendentEmpNo")
                        .HasColumnType("int")
                        .HasComment("Part of composite unique key index");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentId")
                        .HasName("PK_DepartmentMaster_DeptId");

                    b.HasIndex("DepartmentCode", "DepartmentName", "GroupCode", "SuperintendentEmpNo", "ManagerEmpNo")
                        .IsUnique()
                        .HasDatabaseName("IX_DepartmentMaster_CompoKeys");

                    b.ToTable("DepartmentMaster", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmergencyContact", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("Address")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("City")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<string>("LandlineNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RelationCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.HasKey("AutoId")
                        .HasName("PK_EmergencyContact_AutoId");

                    b.HasIndex("EmployeeNo", "ContactPerson", "RelationCode", "MobileNo")
                        .IsUnique()
                        .HasDatabaseName("IX_EmergencyContact_CompoKeys");

                    b.ToTable("EmergencyContact", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for Employee entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("AccountTypeCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AlternateMobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankBranchName")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("BankNameCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CompanyBranchCode")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfConfirmation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfSuperannuation")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EducationCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmployeeClassCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Alternate key used for reference navigation");

                    b.Property<string>("EmployeeStatusCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EmploymentTypeCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FacebookAccount")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("FirstAttendanceModeCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GenderCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IBANNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("InstagramAccount")
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobTitleCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LinkedInAccount")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("MaritalStatusCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NationalityCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OfficeExtNo")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OfficeLandlineNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OfficialEmail")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OldEmployeeNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PayGrade")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("0");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PermanentAreaCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PermanentCity")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PermanentContactNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PermanentCountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PermanentMobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PresentAreaCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PresentCity")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PresentContactNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PresentCountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PresentMobileNo")
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("Reemployed")
                        .HasColumnType("bit");

                    b.Property<string>("ReligionCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ReportingManagerCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ResidenceLandlineNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Salutation")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("SecondAttendanceModeCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("SecondReportingManagerCode")
                        .HasColumnType("int");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ThirdAttendanceModeCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TwitterAccount")
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("WorkPermitExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkPermitID")
                        .HasColumnType("varchar(30)");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee_EmployeeId");

                    b.HasIndex("EmployeeNo", "FirstName", "MiddleName", "LastName")
                        .HasDatabaseName("IX_Employee_EmpName");

                    b.HasIndex("EmployeeNo", "NationalityCode", "ReligionCode", "MaritalStatusCode")
                        .HasDatabaseName("IX_Employee_Attribute");

                    b.HasIndex("EmployeeNo", "HireDate", "TerminationDate", "DateOfConfirmation", "DOB")
                        .IsDescending()
                        .HasDatabaseName("IX_Employee_Date");

                    b.ToTable("Employee", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeCertification", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("CityTownName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references Employee.EmployeeNo alternate key");

                    b.Property<string>("FromMonthCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of unique composite key index");

                    b.Property<int>("FromYear")
                        .HasColumnType("int")
                        .HasComment("Part of unique composite key index");

                    b.Property<string>("Institute")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassMonthCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("PassYear")
                        .HasColumnType("int");

                    b.Property<string>("QualificationCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of unique composite key index");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StreamCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ToMonthCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of unique composite key index");

                    b.Property<int>("ToYear")
                        .HasColumnType("int")
                        .HasComment("Part of unique composite key index");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("AutoId")
                        .HasName("PK_EmployeeCertification_AutoId");

                    b.HasIndex("EmployeeNo", "QualificationCode", "FromMonthCode", "FromYear", "ToMonthCode", "ToYear")
                        .IsUnique()
                        .HasDatabaseName("IX_EmployeeCertification_CompoKeys");

                    b.ToTable("EmployeeCertification", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeMaster", b =>
                {
                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStatusCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentTypeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportingManagerCode")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("EmployeeMasters", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<string>("FromMonthCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("FromYear")
                        .HasColumnType("int");

                    b.Property<string>("LastUsedMonthCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("LastUsedYear")
                        .HasColumnType("int");

                    b.Property<string>("LevelCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ToMonthCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ToYear")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.HasKey("AutoId")
                        .HasName("PK_EmployeeSkill_AutoId");

                    b.HasIndex("EmployeeNo", "SkillName")
                        .IsUnique()
                        .HasDatabaseName("IX_EmployeeSkill_CompoKeys");

                    b.ToTable("EmployeeSkill", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeTransaction", b =>
                {
                    b.Property<string>("ActionCode")
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("SectionCode")
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<int>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references employee transaction. Part of composite key.");

                    b.Property<int>("AutoId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentlyAssignedEmpName")
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("CurrentlyAssignedEmpNo")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<DateTime?>("LastUpdateOn")
                        .HasColumnType("datetime")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.HasKey("ActionCode", "SectionCode", "TransactionNo")
                        .HasName("PK_EmployeeTransaction_CompKey");

                    b.HasIndex("EmployeeNo", "ActionCode", "SectionCode", "StatusCode", "LastUpdateOn")
                        .IsUnique()
                        .HasDatabaseName("IX_EmployeeTransaction_CompoKeys");

                    b.ToTable("EmployeeTransaction", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmploymentHistory", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasComment("Part of composite unique key index");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasComment("Part of composite unique key index");

                    b.Property<decimal?>("LastDrawnSalary")
                        .HasPrecision(14, 3)
                        .HasColumnType("decimal(14,3)");

                    b.Property<string>("ReasonOfChange")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ReportingManager")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SalaryCurrencyCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SalaryTypeCode")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime")
                        .HasComment("Part of composite unique key index");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.HasKey("AutoId")
                        .HasName("PK_EmploymentHistory_AutoId");

                    b.HasIndex("EmployeeNo", "CompanyName", "Designation", "FromDate", "ToDate")
                        .IsUnique()
                        .HasDatabaseName("IX_EmploymentHistory_CompoKeys");

                    b.ToTable("EmploymentHistory", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.FamilyMember", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("CityTownName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime");

                    b.Property<string>("District")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasComment("Part of composite unique key index");

                    b.Property<bool?>("IsDependent")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Occupation")
                        .HasColumnType("varchar(120)");

                    b.Property<string>("QualificationCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RelationCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("SpecializationCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StateCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StreamCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.HasKey("AutoId")
                        .HasName("PK_FamilyMember_AutoId");

                    b.HasIndex("EmployeeNo", "FirstName", "LastName", "RelationCode")
                        .IsUnique()
                        .HasDatabaseName("IX_FamilyMember_CompoKeys");

                    b.ToTable("FamilyMember", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.FamilyVisa", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasComment("Part of composite unique key index");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references primary key: FamilyMember.AutoId");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.Property<string>("VisaTypeCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.HasKey("AutoId")
                        .HasName("PK_FamilyVisa_AutoId");

                    b.HasIndex("EmployeeNo", "VisaTypeCode", "CountryCode", "IssueDate", "ExpiryDate")
                        .IsUnique()
                        .HasDatabaseName("IX_FamilyVisa_CompoKeys");

                    b.ToTable("FamilyVisa", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.IdentityProof", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<DateTime?>("ContractDateOfExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ContractDateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ContractPlaceOfIssue")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DLDateOfExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DLDateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("DLPlaceOfIssue")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateOfExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("DrivingLicenseNo")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<DateTime?>("NatIDDateOfExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NatIDDateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("NatIDPlaceOfIssue")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NationalIDNumber")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("NationalIDTypeCode")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("OtherDocDateOfExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OtherDocDateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherDocNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PlaceOfIssue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Profession")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sponsor")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.Property<string>("TypeOfDocument")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VisaCountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("VisaDateOfExpiry")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VisaDateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<string>("VisaNumber")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("VisaTypeCode")
                        .HasColumnType("varchar(20)");

                    b.HasKey("AutoId")
                        .HasName("PK_IdentityProof_AutoId");

                    b.HasIndex("EmployeeNo")
                        .IsUnique();

                    b.HasIndex("EmployeeNo", "NationalIDNumber", "NationalIDTypeCode")
                        .IsUnique()
                        .HasDatabaseName("IX_IdentityProof_NatlIDDetail");

                    b.HasIndex("EmployeeNo", "ContractNumber", "ContractDateOfIssue", "ContractDateOfExpiry")
                        .HasDatabaseName("IX_IdentityProof_ContractDetail");

                    b.HasIndex("EmployeeNo", "PassportNumber", "DateOfIssue", "DateOfExpiry")
                        .IsUnique()
                        .HasDatabaseName("IX_IdentityProof_PassportInfo")
                        .HasFilter("[PassportNumber] IS NOT NULL AND [DateOfIssue] IS NOT NULL AND [DateOfExpiry] IS NOT NULL");

                    b.HasIndex("EmployeeNo", "VisaCountryCode", "VisaNumber", "VisaTypeCode")
                        .IsUnique()
                        .HasDatabaseName("IX_IdentityProof_VisaDetail");

                    b.ToTable("IdentityProof", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.LanguageSkill", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<bool?>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanSpeak")
                        .HasColumnType("bit");

                    b.Property<bool?>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<bool?>("MotherTongue")
                        .HasColumnType("bit");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.HasKey("AutoId")
                        .HasName("PK_LanguageSkill_AutoId");

                    b.HasIndex("EmployeeNo", "LanguageCode")
                        .IsUnique()
                        .HasDatabaseName("IX_LanguageSkill_CompoKeys");

                    b.ToTable("LanguageSkill", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.OtherDocument", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("ContentTypeCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasComment("Part of composite unique key index");

                    b.Property<string>("DocumentTypeCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasComment("Part of composite unique key index");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("AutoId")
                        .HasName("PK_OtherDocument_AutoId");

                    b.HasIndex("EmployeeNo", "DocumentName", "DocumentTypeCode")
                        .IsUnique()
                        .HasDatabaseName("IX_OtherDocument_CompoKeys");

                    b.ToTable("OtherDocument", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.Qualification", b =>
                {
                    b.Property<int>("AutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoId"));

                    b.Property<string>("CityTownName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EmployeeNo")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<string>("FromMonthCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("FromYear")
                        .HasColumnType("int");

                    b.Property<string>("Institute")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PassMonthCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PassYear")
                        .HasColumnType("int");

                    b.Property<string>("QualificationCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("QualificationMode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SpecializationCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StateCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StreamCode")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ToMonthCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ToYear")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionNo")
                        .HasColumnType("int")
                        .HasComment("Unique ID number that is generated when a request requires approval");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("AutoId")
                        .HasName("PK_Qualification_AutoId");

                    b.HasIndex("EmployeeNo", "QualificationCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Qualification_CompoKeys");

                    b.ToTable("Qualification", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.UserDefinedCode", b =>
                {
                    b.Property<int>("UDCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key of UserDefinedCode entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UDCId"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(13, 3)
                        .HasColumnType("decimal(13,3)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int")
                        .HasComment("Foreign key that references alternate key: Employee.EmployeeNo");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<string>("UDCCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UDCDesc1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UDCDesc2")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UDCSpecialHandlingCode")
                        .HasColumnType("varchar(20)");

                    b.HasKey("UDCId")
                        .HasName("PK_UserDefinedCode_UDCId");

                    b.HasIndex("GroupID");

                    b.HasIndex("UDCCode", "UDCDesc1", "UDCSpecialHandlingCode")
                        .IsUnique()
                        .HasDatabaseName("IX_UserDefinedCode_CompoKeys");

                    b.ToTable("UserDefinedCode", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.UserDefinedCodeGroup", b =>
                {
                    b.Property<int>("UDCGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key of UserDefinedCodeGroup entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UDCGroupId"));

                    b.Property<string>("UDCGCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UDCGDesc1")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UDCGDesc2")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UDCGSpecialHandlingCode")
                        .HasColumnType("varchar(20)");

                    b.HasKey("UDCGroupId")
                        .HasName("PK_UserDefinedCodeGroup_UDCGroupId");

                    b.HasIndex("UDCGCode", "UDCGDesc1", "UDCGSpecialHandlingCode")
                        .IsUnique()
                        .HasDatabaseName("IX_UserDefinedCodeGroup_CompoKeys");

                    b.ToTable("UserDefinedCodeGroup", "kenuser");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmergencyContact", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmergencyContactList")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeCertification", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeCertifications")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmployeeTransaction", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeTransactions")
                        .HasForeignKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.EmploymentHistory", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("EmploymentHistories")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.FamilyMember", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.FamilyVisa", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("FamilyVisas")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.IdentityProof", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithOne("IdentityProof")
                        .HasForeignKey("KenHRApp.Domain.Entities.IdentityProof", "EmployeeNo")
                        .HasPrincipalKey("KenHRApp.Domain.Entities.Employee", "EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.LanguageSkill", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("LanguageSkills")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.OtherDocument", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("OtherDocuments")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.Qualification", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.Employee", "Employee")
                        .WithMany("Qualifications")
                        .HasForeignKey("EmployeeNo")
                        .HasPrincipalKey("EmployeeNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.UserDefinedCode", b =>
                {
                    b.HasOne("KenHRApp.Domain.Entities.UserDefinedCodeGroup", "UserDefinedCodeGroup")
                        .WithMany("UserDefinedCodeList")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDefinedCodeGroup");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmergencyContactList");

                    b.Navigation("EmployeeCertifications");

                    b.Navigation("EmployeeSkills");

                    b.Navigation("EmployeeTransactions");

                    b.Navigation("EmploymentHistories");

                    b.Navigation("FamilyMembers");

                    b.Navigation("FamilyVisas");

                    b.Navigation("IdentityProof");

                    b.Navigation("LanguageSkills");

                    b.Navigation("OtherDocuments");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("KenHRApp.Domain.Entities.UserDefinedCodeGroup", b =>
                {
                    b.Navigation("UserDefinedCodeList");
                });
#pragma warning restore 612, 618
        }
    }
}
