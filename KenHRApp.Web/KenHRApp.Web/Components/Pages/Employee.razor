@page "/employees"
@using KenHRApp.Domain.Entities
@using KenHRApp.Application.Common.Interfaces
@using System.Text
@using System.ComponentModel.DataAnnotations
@using KenHRApp.Web.Components.Common
@using KenHRApp.Web.Components.Shared

@implements IDisposable     // Implements System.IDisposable so that the Dispose method can be called 
@inject ILogger<Employee> Logger

@inject IEmployeeService EmployeeService
@inject IAppCacheService AppCacheService
@inject ISnackbar Snackbar
@inject ILookupCacheService LookupCache
@inject NavigationManager Navigation
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False" Class="px-4">
    <EditForm EditContext="@_editContext"
        OnValidSubmit="HandleValidSubmit" 
        OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator/>
        @if (_hasValidationError && _validationMessages.Any())
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="mb-2">
                <MudText Typo="Typo.subtitle1"><strong>Please correct the following data entry errors:</strong></MudText>
                <ul style="margin:0; padding-left:20px;">
                @foreach (var msg in _validationMessages)
                {
                    <li>
                        <MudText Typo="Typo.subtitle2" Class="text-white">@msg</MudText>
                    </li>
                }
            </ul>
            </MudAlert>
        }
        <MudPaper class="paper-header w-100 px-4" Elevation="0">
            <MudText Typo="Typo.h5" Align="Align.Start" Class="pb-3 ps-3" Style="color: #004165;">@employee.EmployeeFullName</MudText>
                <MudBreadcrumbs Items="@_breadcrumbItems" SeparatorIcon="@Icons.Material.Filled.ChevronRight" MaxItems="4" Class="mud-primary-text" />
            <MudPaper>
                @if (ActionType == ActionTypes.Edit.ToString() ||
                    ActionType == ActionTypes.View.ToString())
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit"
                               Size="Size.Small" Color="Color.Info" Disabled="@(_isEditMode)" OnClick="HandleEditEmployee">
                        Edit
                    </MudButton>
                }
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Class="ml-1"
                    Size="Size.Small" Color="Color.Success" Disabled="@(!_saveBtnEnabled)">
                    Save
                </MudButton>
                @if (ActionType == ActionTypes.Edit.ToString() ||
                    ActionType == ActionTypes.View.ToString())
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Undo" Class="ml-1"
                        Size="Size.Small" Color="Color.Warning" Disabled="@(!_isEditMode)" OnClick="HandleUndoChanges">
                        Undo
                    </MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" 
                        Size="Size.Small" Color="Color.Tertiary" Disabled="@(_isEditMode)" OnClick="HandleRefreshPage">
                        Refresh
                    </MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete"
                               Size="Size.Small" Color="Color.Error" Disabled="@_isEditMode" OnClick="@ShowDeleteDialog">
                        Delete
                    </MudButton>
                }
                @if (ActionType == ActionTypes.Add.ToString())
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Class="ml-1" OnClick="@ShowCancelDialog"
                        Size="Size.Small" Color="Color.Error">
                        Cancel
                    </MudButton>
                }
            </MudPaper>
        </MudPaper>
        <MudTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true" Position="Position.Top" Color="Color.Default"
            PanelClass="pa-6" ActiveTabClass="border-solid border-2 mud-border-primary">
            @if (_showErrorAlert)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Left"
                          ShowCloseIcon="true" CloseIconClicked="(() => ShowHideError(false))">
                    @_errorMessage
                </MudAlert>
            }
            <MudTabPanel Text="About Me" ToolTip="Manage employee profile" Icon="@Icons.Material.Rounded.Person2">
                <div id="aboutMePanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-user-edit" Style="color: #004165;" class="mr-3" Size=Size.Small></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Personal Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="0">
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">                                            
                                                <MudAutocomplete @bind-Value="employee.SalutationDesc"
                                                    Label="Salutation"
                                                                 For="@(() => employee.SalutationDesc)"
                                                                 Class="employee-autocomplete"
                                                    SearchFunc="SearchSalutation!"
                                                    Variant="Variant.Text"                                                    
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable"
                                                    Typo="Typo.subtitle2"
                                                    MaxItems="@(_salutationList != null ? _salutationList.Count : 10)"
                                                    Disabled="@_isDisabled"                                                
                                                    Modal="true" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                @* <LabelWithAsterisk TModel="EmployeeDTO" TValue="string" Label="Last Name" For="x => x.LastName" /> *@
                                                <MudTextField @bind-Value="employee.LastName" For="@(() => employee.LastName)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="50" MaxLength="50" Disabled="@_isDisabled" Label="Last Name"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudAutocomplete @bind-Value="employee.NationalityDesc"
                                                    Label="Nationality"
                                                    For="@(() => employee.NationalityDesc)" 
                                                    Class="employee-autocomplete"
                                                    SearchFunc="SearchCountry!"
                                                    Variant="Variant.Text"                                                    
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable" 
                                                    Typo="Typo.subtitle2"
                                                    MaxItems="@(_countryList != null ? _countryList.Count : 10)"
                                                    Disabled="@_isDisabled"
                                                    Modal="true" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>  
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                @* <LabelWithAsterisk TModel="EmployeeDTO" TValue="string" Label="First Name" For="x => x.FirstName" /> *@
                                                <MudTextField @bind-Value="employee.FirstName" For="@(() => employee.FirstName)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                              Counter="50" MaxLength="50" Disabled="@_isDisabled" Label="First Name"
                                                              Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                @* <LabelWithAsterisk TModel="EmployeeDTO" TValue="string" Label="Religion" For="x => x.ReligionDesc" /> *@
                                                <MudAutocomplete @bind-Value="employee.ReligionDesc"
                                                    For="@(() => employee.ReligionDesc)" 
                                                    Class="employee-autocomplete"
                                                    Label="Religion"
                                                    SearchFunc="SearchReligion!"
                                                    Variant="Variant.Text"                                                    
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable" 
                                                    Typo="Typo.subtitle2"
                                                    Disabled="@_isDisabled"
                                                    MaxItems="@(_religionList != null ? _religionList.Count : 10)"
                                                    Modal="true" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">       
                                                @* <LabelWithAsterisk TModel="EmployeeDTO" TValue="string" Label="Gender" For="x => x.GenderDesc" /> *@
                                                <MudAutocomplete @bind-Value="employee.GenderDesc"
                                                    For="@(() => employee.GenderDesc)" 
                                                    Class="employee-autocomplete"
                                                    SearchFunc="SearchGender!"
                                                    Label="Gender"
                                                    Variant="Variant.Text"                                                    
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable" 
                                                    Typo="Typo.subtitle2"
                                                    Disabled="@_isDisabled"
                                                    Modal="true" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.MiddleName" Label="Middle Name"
                                                              For="@(() => employee.MiddleName)"
                                                              HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="50" MaxLength="50" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudDatePicker Editable="true" @bind-Date="employee.DOB" Label="Date of Birth"
                                                    For="@(() => employee.DOB)" MaxDate="@DateTime.Today" AutoClose="true" 
                                                    Margin="Margin.Dense" Style="width:300px;"
                                                    HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" 
                                                    Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                    Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                    <PickerActions Context="dboContext">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.DOB = DateTime.Today))">Today</MudButton>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.DOB = null))">Clear</MudButton>
                                                    </PickerActions>
                                                </MudDatePicker>
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">        
                                                @* <LabelWithAsterisk TModel="EmployeeDTO" TValue="string" Label="Marital Status" For="x => x.MaritalStatusDesc" /> *@
                                                <MudAutocomplete @bind-Value="employee.MaritalStatusDesc"
                                                    For="@(() => employee.MaritalStatusDesc)" 
                                                    Class="employee-autocomplete"
                                                    SearchFunc="SearchMaritalStatus!"
                                                    Label="Marital Status"
                                                    Variant="Variant.Text"                                                    
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable"
                                                    Typo="Typo.subtitle2"
                                                    Disabled="@_isDisabled"
                                                    Modal="true" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex panel-section">
                                    <MudIcon Icon="fas fa-phone" class="mr-3 pt-1" Style="color: #004165;" Size=Size.Small></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Contact Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="0">
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                @* <LabelWithAsterisk TModel="EmployeeDTO" TValue="string" Label="Office Email" For="x => x.OfficialEmail" /> *@
                                                <MudTextField @bind-Value="employee.OfficialEmail" For="@(() => employee.OfficialEmail)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="50" MaxLength="50" Disabled="@_isDisabled" Label="Office Email"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.OfficeLandlineNo" Label="Office Landline No." 
                                                    For="@(() => employee.OfficeLandlineNo)" 
                                                    HelperText="Max. text input is 20 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="20" MaxLength="20" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.AlternateMobileNo" Label="Alternate Mobile No." 
                                                    For="@(() => employee.AlternateMobileNo)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="20" MaxLength="20" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.PersonalEmail"Label="Personal Email"
                                                    For="@(() => employee.PersonalEmail)" Immediate="true"
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="50" MaxLength="50" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.OfficeExtNo" Label="Office Extension" 
                                                    For="@(() => employee.OfficeExtNo)" 
                                                    HelperText="Max. text input is 10 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="10" MaxLength="10" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.ResidenceLandlineNo" Label="Residential Landline No." 
                                                    For="@(() => employee.ResidenceLandlineNo)" 
                                                    HelperText="Max. text input is 20 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="50" MaxLength="20" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.AlternateEmail" Label="Alternate Email" 
                                                    For="@(() => employee.AlternateEmail)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="50" MaxLength="50" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.MobileNo" Label="Mobile No." 
                                                    For="@(() => employee.MobileNo)" 
                                                    HelperText="Max. text input is 20 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Counter="20" MaxLength="20" Disabled="@_isDisabled"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0" Expanded Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-briefcase" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Employment Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="0">
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.EmployeeNo" Label="Employee No." 
                                                    For="@(() => employee.EmployeeNo)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Clearable="@_isClearable" Immediate="true" Margin="Margin.Dense" Disabled="true" 
                                                    Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.OldEmployeeNo" Label="Old Employee No" 
                                                    For="@(() => employee.OldEmployeeNo)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudDatePicker Label="Date of Joining" Editable="true" @bind-Date="employee.HireDate" 
                                                    For="@(() => employee.HireDate)" AutoClose="true" 
                                                    Margin="Margin.Dense" Style="width:300px;"
                                                    HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                    Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                    <PickerActions Context="dateContext">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.HireDate = DateTime.Today))">Today</MudButton>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.HireDate = null))">Clear</MudButton>
                                                    </PickerActions>
                                                </MudDatePicker>
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudDatePicker Label="Relieving Date" Editable="true" 
                                                    @bind-Date="employee.TerminationDate" AutoClose="true" 
                                                    For="@(() => employee.TerminationDate)" 
                                                    Margin="Margin.Dense" Style="width:300px;"
                                                    HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                    Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                    <PickerActions Context="dateContext">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.TerminationDate = DateTime.Today))">Today</MudButton>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.TerminationDate = null))">Clear</MudButton>
                                                    </PickerActions>
                                                </MudDatePicker>
                                            </MudPaper>                                
                                        </MudStack>
                                    </MudItem>
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudAutocomplete @bind-Value="employee.EmployeeStatusDesc"
                                                    For="@(() => employee.EmployeeStatusDesc)" 
                                                    Class="employee-autocomplete"
                                                    SearchFunc="SearchEmployeeStatus!"
                                                    Variant="Variant.Text"
                                                    Label="Employee Status"
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable" 
                                                    Typo="Typo.subtitle2"
                                                    Disabled="@_isDisabled"
                                                    Modal="true" />
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.WorkPermitID" Label="Work Permit ID" 
                                                    For="@(() => employee.WorkPermitID)" 
                                                    HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                                    Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudTextField @bind-Value="employee.Tenure" Label="Tenure"
                                                    For="@(() => employee.Tenure)"
                                                    HelperText="Read-only field that calculates the service period" Variant="Variant.Text" HelperTextOnFocus="true"
                                                    ReadOnly="true" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudDatePicker Label="Date of Superannuation" Editable="true" AutoClose="true" 
                                                    @bind-Date="employee.DateOfSuperannuation" 
                                                    For="@(() => employee.DateOfSuperannuation)"
                                                    Margin="Margin.Dense" Style="width:300px;"
                                                    HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                    Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                    <PickerActions Context="dateContext">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.DateOfSuperannuation = DateTime.Today))">Today</MudButton>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.DateOfSuperannuation = null))">Clear</MudButton>
                                                    </PickerActions>
                                                </MudDatePicker>
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                    <MudItem xs="6" sm="4" Class="px-4">
                                        <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudAutocomplete @bind-Value="employee.ReportingManager"
                                                    For="@(() => employee.ReportingManager)"
                                                    SearchFunc="SearchReportingManager!"
                                                    Variant="Variant.Text"
                                                    Label="Reporting Manager"
                                                    Margin="Margin.Dense"
                                                    Dense="true"
                                                    Placeholder="Please Select"
                                                    HelperText="Type a key to search for value"
                                                    HelperTextOnFocus="true"
                                                    Clearable="@_isCboClearable" 
                                                    Typo="Typo.subtitle2"
                                                    Disabled="@_isDisabled"
                                                    Modal="true" />
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudDatePicker Label="Work Permit Expiry Date" Editable="true" AutoClose="true" 
                                                    @bind-Date="employee.WorkPermitExpiryDate" 
                                                    For="@(() => employee.WorkPermitExpiryDate)"
                                                    Margin="Margin.Dense" Style="width:300px;"
                                                    HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                    Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                    <PickerActions Context="dateContext">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.WorkPermitExpiryDate = DateTime.Today))">Today</MudButton>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.WorkPermitExpiryDate = null))">Clear</MudButton>
                                                    </PickerActions>
                                                </MudDatePicker>
                                            </MudPaper>
                                            <MudPaper Elevation="0" Class="p-0">
                                                <MudDatePicker Label="Date of Confirmation" Editable="true" @bind-Date="employee.DateOfConfirmation" Margin="Margin.Dense" Style="width:300px;"
                                                               HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" AutoClose="true"
                                                               Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                    <PickerActions Context="dateContext">
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.DateOfConfirmation = DateTime.Today))">Today</MudButton>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.DateOfConfirmation = null))">Clear</MudButton>
                                                    </PickerActions>
                                                </MudDatePicker>
                                            </MudPaper>                                       
                                            <MudAutocomplete @bind-Value="employee.DepartmentName"
                                                For="@(() => employee.DepartmentName)"
                                                SearchFunc="SearchDepartment!"
                                                Variant="Variant.Text"
                                                Label="Department"
                                                Margin="Margin.Dense"
                                                Dense="true"
                                                Placeholder="Please Select"
                                                HelperText="Type a key to search for value"
                                                HelperTextOnFocus="true"
                                                Clearable="@_isCboClearable" 
                                                Typo="Typo.subtitle2"
                                                Disabled="@_isDisabled"
                                                             MaxItems="@(_departmentList != null ? _departmentList.Count : 10)"
                                                Modal="true" />
                                        </MudStack>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>                
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-user-tie" class="mr-3 pt-1" Style="color: #004165;" Size=Size.Small></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Attribute Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="4" Wrap="Wrap.Wrap" Justify="Justify.FlexStart" StretchItems="StretchItems.All">
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.Company" 
                                            For="@(() => employee.Company)" Label="Company" 
                                            Counter="150" MaxLength="150"
                                            HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" 
                                            Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0"  Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.CompanyBranch" 
                                            For="@(() => employee.CompanyBranch)" Label="Company Branch" 
                                            Counter="150" MaxLength="150"
                                            HelperText="Max. text input is 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" 
                                            Margin="Margin.Dense" Typo="Typo.subtitle2" />

                                        @* <MudAutocomplete @bind-Value="employee.CompanyBranchDesc"
                                            For="@(() => employee.CompanyBranchDesc)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchCompanyBranch!"
                                            Variant="Variant.Text"
                                            Label="Company Branch"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_companyBranchList != null ? _companyBranchList.Count : 10)"
                                            Modal="true" /> *@
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0"  Style="width: 300px;">                                   
                                        <MudAutocomplete @bind-Value="employee.EducationDesc"
                                            For="@(() => employee.EducationDesc)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchEducationLevel!"
                                            Variant="Variant.Text"
                                            Label="Education Level"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_educationLevelList != null ? _educationLevelList.Count : 10)"
                                            Modal="true" />
                                    </MudPaper>    
                                    <MudFlexBreak />
                                    <MudPaper Elevation="0" Class="p-0"  Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.EmployeeClassDesc"
                                            For="@(() => employee.EmployeeClassDesc)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchEmployeeClass!"
                                            Variant="Variant.Text"
                                            Label="Employee Class"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_employeeClassList != null ? _employeeClassList.Count : 10)"
                                            Modal="true" />
                                    </MudPaper>                                        
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">     
                                        <MudSelect T="string"
                                            @bind-Value="employee.JobTitleDesc" 
                                            For="@(() => employee.JobTitleDesc)"
                                            Label="Job Title" 
                                            Variant="Variant.Text" 
                                            Margin="Margin.Dense" 
                                            Placeholder="Please Select" 
                                            AdornmentIcon="@Icons.Material.Filled.ArrowDropDown" 
                                            AdornmentColor="Color.Default"
                                            HelperText="Select job title" 
                                            HelperTextOnFocus="true" 
                                            Clearable="@_isCboClearable" 
                                            Disabled="@_isDisabled"
                                            Immediate="true" 
                                            Typo="Typo.subtitle2">
                                            @foreach (var job in _jobTitleList)
                                            {
                                                <MudSelectItem Value="job.UDCDesc1">@job.UDCDesc1</MudSelectItem>
                                            }
                                        </MudSelect>     
                                        @* <MudAutocomplete @bind-Value="employee.JobTitleDesc"
                                            For="@(() => employee.JobTitleDesc)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchJobTitle!"
                                            Variant="Variant.Text"
                                            Label="Job Title"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_jobTitleList != null ? _jobTitleList.Count : 10)"
                                            Modal="true" /> *@
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.PayGradeDesc"
                                            For="@(() => employee.PayGradeDesc)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchPayGrade!"
                                            Variant="Variant.Text"
                                            Label="Pay Grade"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_payGradeList != null ? _payGradeList.Count : 10)"
                                            Modal="true" />
                                    </MudPaper>
                                    <MudFlexBreak />
                                    <MudPaper Elevation="0" Class="p-0"  Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.EmploymentType"
                                            For="@(() => employee.EmploymentType)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchEmploymentType!"
                                            Variant="Variant.Text"
                                            Label="Employment Type"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_employmentTypeList != null ? _employmentTypeList.Count : 10)"
                                            Modal="true" />
                                    </MudPaper> 
                                    <MudPaper Elevation="0" Class="p-0"  Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.RoleType"
                                            For="@(() => employee.RoleType)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchRoleType!"
                                            Variant="Variant.Text"
                                            Label="Role Type"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_roleTypeList != null ? _roleTypeList.Count : 10)"
                                            Modal="true" />
                                    </MudPaper> 
                                    <MudPaper Elevation="0" Class="p-0"  Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.FirstAttendanceMode"
                                            For="@(() => employee.FirstAttendanceMode)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchAttendanceMode!"
                                            Variant="Variant.Text"
                                            Label="First Attendance Mode"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            MaxItems="@(_attendanceModeList != null ? _attendanceModeList.Count : 10)"
                                            Modal="true" />
                                    </MudPaper> 
                                    <MudFlexBreak />
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.SecondAttendanceMode"
                                                         For="@(() => employee.SecondAttendanceMode)"
                                                         Class="employee-autocomplete"
                                                         SearchFunc="SearchAttendanceMode!"
                                                         Variant="Variant.Text"
                                                         Label="Second Attendance Mode"
                                                         Margin="Margin.Dense"
                                                         Dense="true"
                                                         Placeholder="Please Select"
                                                         HelperText="Type a key to search for value"
                                                         HelperTextOnFocus="true"
                                                         Clearable="@_isCboClearable"
                                                         Typo="Typo.subtitle2"
                                                         Disabled="@_isDisabled"
                                                         MaxItems="@(_attendanceModeList != null ? _attendanceModeList.Count : 10)"
                                                         Modal="true" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.ThirdAttendanceMode"
                                                         For="@(() => employee.ThirdAttendanceMode)"
                                                         Class="employee-autocomplete"
                                                         SearchFunc="SearchAttendanceMode!"
                                                         Variant="Variant.Text"
                                                         Label="Third Attendance Mode"
                                                         Margin="Margin.Dense"
                                                         Dense="true"
                                                         Placeholder="Please Select"
                                                         HelperText="Type a key to search for value"
                                                         HelperTextOnFocus="true"
                                                         Clearable="@_isCboClearable"
                                                         Typo="Typo.subtitle2"
                                                         Disabled="@_isDisabled"
                                                         MaxItems="@(_attendanceModeList != null ? _attendanceModeList.Count : 10)"
                                                         Modal="true" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;" />
                                </MudStack>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-university" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Bank Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="4" Wrap="Wrap.Wrap" Justify="Justify.FlexStart" StretchItems="StretchItems.All">
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudAutocomplete @bind-Value="employee.AccountTypeDesc"
                                            For="@(() => employee.AccountTypeDesc)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchAccountType!"
                                            Variant="Variant.Text"
                                            Label="Account Type"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            Modal="true" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.AccountNumber" Label="Account Number" 
                                            For="@(() => employee.AccountNumber)"
                                            HelperText="Input must not exceed 30 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.AccountHolderName" Label="Account Holder Name" 
                                            For="@(() => employee.AccountHolderName)"
                                            HelperText="Input must not exceed 50 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>                                
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">                                    
                                        <MudAutocomplete @bind-Value="employee.BankName"
                                            For="@(() => employee.BankName)"
                                            Class="employee-autocomplete"
                                            SearchFunc="SearchBankName!"
                                            Variant="Variant.Text"
                                            Label="Bank Name"
                                            Margin="Margin.Dense"
                                            Dense="true"
                                            Placeholder="Please Select"
                                            HelperText="Type a key to search for value"
                                            HelperTextOnFocus="true"
                                            Clearable="@_isCboClearable" 
                                            Typo="Typo.subtitle2"
                                            Disabled="@_isDisabled"
                                            Modal="true" />
                                    </MudPaper>
                                    <MudFlexBreak />
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.BankBranchName" Label="Branch Name" 
                                            For="@(() => employee.BankBranchName)"
                                            Variant="Variant.Text"
                                            HelperText="Input must not exceed 150 chars." Counter="150" MaxLength="150" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.IBANNumber" Label="IBAN Number" 
                                            For="@(() => employee.IBANNumber)"
                                            HelperText="Input must not exceed 30 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;">
                                        <MudTextField @bind-Value="employee.TaxNumber" Label="Tax Number" 
                                            For="@(() => employee.TaxNumber)"
                                            HelperText="Input must not exceed 40 chars." Variant="Variant.Text" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 300px;" />
                                </MudStack>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0 pb-4" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-user-circle" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Social Connect</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="4" Wrap="Wrap.Wrap" Justify="Justify.FlexStart" StretchItems="StretchItems.All">
                                    <MudPaper Elevation="0" Class="p-0" Style="width: 200px;">
                                        <MudTextField @bind-Value="employee.LinkedInAccount" Label="Linked In" 
                                            For="@(() => employee.LinkedInAccount)"
                                            HelperText="Max. text input is 40 chars." Variant="Variant.Filled" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0">
                                        <MudTextField @bind-Value="employee.FacebookAccount" Label="Facebook" 
                                            For="@(() => employee.FacebookAccount)"
                                            HelperText="Max. text input is 40 chars." Variant="Variant.Filled" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0">
                                        <MudTextField @bind-Value="employee.TwitterAccount" Label="Twitter" 
                                            For="@(() => employee.TwitterAccount)"
                                            HelperText="Max. text input is 40 chars." Variant="Variant.Filled" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                    <MudPaper Elevation="0" Class="p-0">
                                         <MudTextField @bind-Value="employee.InstagramAccount" Label="Instagram" 
                                            For="@(() => employee.InstagramAccount)"
                                            HelperText="Max. text input is 40 chars." Variant="Variant.Filled" HelperTextOnFocus="true"
                                            Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                    </MudPaper>
                                </MudStack>
                            </ChildContent>
                        </MudExpansionPanel>                 
                        <MudScrollToTop TopOffset="100"
                                         Selector="#aboutMePanel"
                                         VisibleCssClass="visible absolute"
                                         HiddenCssClass="hidden absolute">
                             <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                         </MudScrollToTop>
                    </MudExpansionPanels>
                 </div>
            </MudTabPanel>
            <MudTabPanel Text="Address" ToolTip="Manage address and location" Icon="@Icons.Material.Rounded.LocationOn">
                <div id="addressPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="pt-0 mt-0 pb-4" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-map-marker-alt" class="mr-1 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Present Address</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="0">
                                    <MudItem xs="12">
                                        <MudStack Row="true" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0 w-100">
                                                <MudTextField @bind-Value="employee.PresentAddress" Label="Address" 
                                                    For="@(() => employee.PresentAddress)"
                                                    HelperText="Max. text input is 300 chars."
                                                    Variant="Variant.Filled" HelperTextOnFocus="true" Counter="300" MaxLength="300" Lines="3"
                                                    Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Spacing="5">
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            @* <MudSelect @bind-Value="employee.PresentCountryCode" Variant="Variant.Text" Margin="Margin.Dense" Label="Country"
                                                Placeholder="Please Select" AdornmentIcon="@Icons.Material.Filled.ArrowDropDown" AdornmentColor="Color.Default"
                                                HelperText="Allows only 1 selection" HelperTextOnFocus="true" Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Typo="Typo.subtitle2">
                                                @foreach (var state in _states)
                                                {
                                                    <MudSelectItem Value="state">@state</MudSelectItem>
                                                }
                                            </MudSelect> *@
                                            <MudAutocomplete @bind-Value="employee.PresentCountryDesc"
                                                            For="@(() => employee.PresentCountryDesc)"
                                                             Class="employee-autocomplete"
                                                             SearchFunc="SearchCountry!"
                                                             Variant="Variant.Text"
                                                             Label="Country"
                                                             Margin="Margin.Dense"
                                                             Dense="true"
                                                             Placeholder="Please Select"
                                                             HelperText="Type a key to search for value"
                                                             HelperTextOnFocus="true"
                                                             Clearable="@_isCboClearable" 
                                                             Typo="Typo.subtitle2"
                                                             MaxItems="@(_countryList != null ? _countryList.Count : 10)"
                                                             Disabled="@_isDisabled"
                                                             Modal="true" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PresentCity" Label="City" 
                                                For="@(() => employee.PresentCity)"
                                                HelperText="Max. text input is 100 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="100" MaxLength="100" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PresentAreaCode" Label="Area Code" 
                                                For="@(() => employee.PresentAreaCode)"
                                                HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Spacing="5">
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PresentContactNo" Label="Contact No." 
                                                For="@(() => employee.PresentContactNo)"
                                                HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20"
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PresentMobileNo" Label="Mobile No." 
                                                For="@(() => employee.PresentMobileNo)"
                                                HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20"
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-house-user" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Permanent Address</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="0">
                                    <MudItem xs="12">
                                        <MudStack Row="true" AlignItems="AlignItems.Stretch" Spacing="0" Wrap="Wrap.NoWrap">
                                            <MudPaper Elevation="0" Class="p-0 w-100">
                                                <MudTextField @bind-Value="employee.PermanentAddress" Label="Address" 
                                                    For="@(() => employee.PermanentAddress)"
                                                    HelperText="Max. text input is 300 chars."
                                                              Variant="Variant.Filled" HelperTextOnFocus="true" Counter="300" MaxLength="300" Lines="3"
                                                    Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                            </MudPaper>
                                        </MudStack>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Spacing="4">
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudAutocomplete @bind-Value="employee.PermanentCountryDesc"
                                                        For="@(() => employee.PermanentCountryDesc)"
                                                        Class="employee-autocomplete"
                                                        SearchFunc="SearchCountry!"
                                                        Variant="Variant.Text"
                                                        Label="Country"
                                                        Margin="Margin.Dense"
                                                        Dense="true"
                                                        Placeholder="Please Select"
                                                        HelperText="Type a key to search for value"
                                                        HelperTextOnFocus="true"
                                                        Clearable="@_isCboClearable" 
                                                        Typo="Typo.subtitle2"
                                                        MaxItems="@(_countryList != null ? _countryList.Count : 10)"
                                                        Disabled="@_isDisabled"
                                                        Modal="true" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PermanentCity" Label="City" 
                                                For="@(() => employee.PermanentCity)"
                                                HelperText="Max. text input is 100 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="100" MaxLength="100" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PermanentAreaCode" Label="Area Code" 
                                                For="@(() => employee.PermanentAreaCode)"
                                                HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Spacing="4">
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PermanentContactNo" Label="Contact No." 
                                                For="@(() => employee.PermanentContactNo)"
                                                HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20"
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.PermanentMobileNo" Label="Mobile No."
                                                          For="@(() => employee.PermanentMobileNo)"
                                                HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20"
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-mobile-alt" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Emergency Contacts</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">                            
                                    <MudDataGrid T="EmergencyContactDTO" Items="@employee.EmergencyContactList" Hover="true" Striped="true" Class="emergency-contact-grid"
                                        TableLayout="TableLayout.Fixed" Dense="true" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true" EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.ContactPerson" Title="Contact Person" Class="col-contact-person" />
                                            <PropertyColumn Property="x => x.Address" Class="col-contact-address" />
                                            <PropertyColumn Property="x => x.Relation" Title="Relationship" Class="col-relationship" />
                                            <PropertyColumn Property="x => x.CountryDesc" Title="Country" />
                                            <PropertyColumn Property="x => x.City" Title="City" />
                                            <PropertyColumn Property="x => x.MobileNo" Title="Mobile No." />
                                            <PropertyColumn Property="x => x.LandlineNo" Title="Landline No." />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                    <CellTemplate Context="row">
                                                    <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                    </MudDataGrid>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#addressPanel"
                                         VisibleCssClass="visible absolute"
                                         HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                         </MudScrollToTop>
                    </MudExpansionPanels>  
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Identity Proofs" ToolTip="Manage employee details" Icon="@Icons.Material.Rounded.PermIdentity">
                <div id="identityPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-id-card" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Passport Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.PassportNumber" Label="Passport Number" HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                     <MudItem xs="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.PlaceOfIssue" Label="Place of Issue" HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true"Counter="100" MaxLength="100" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Issue" Editable="true" @bind-Date="employee.EmpIdentityProof.DateOfIssue" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DateOfIssue = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DateOfIssue = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Expiry" Editable="true" @bind-Date="employee.EmpIdentityProof.DateOfExpiry" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DateOfExpiry = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DateOfExpiry = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-car" class="mr-3 pt-1" Style="font-size: 20px; color: #004165"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Driving License</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.DrivingLicenseNo" Label="Driving License No." HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                     <MudItem xs="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.DLPlaceOfIssue" Label="Place of Issue" HelperText="Max. text input is 20 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true"Counter="100" MaxLength="100" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Issue" Editable="true" @bind-Date="employee.EmpIdentityProof.DLDateOfIssue" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DLDateOfIssue = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DLDateOfIssue = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Expiry" Editable="true" @bind-Date="employee.EmpIdentityProof.DLDateOfExpiry" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DLDateOfExpiry = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.DLDateOfExpiry = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-id-card" class="mr-3 pt-1" Style="font-size: 20px; color: #004165"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>National ID</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.NationalIDNumber" Label="National ID No." HelperText="Max. text input is 20 chars."
                                                          Variant="Variant.Text" HelperTextOnFocus="true" Counter="20" MaxLength="20"
                                                          Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.NatIDPlaceOfIssue" Label="Place of Issue" HelperText="Max. text input is 20 chars."
                                                          Variant="Variant.Text" HelperTextOnFocus="true" Counter="100" MaxLength="100"
                                                          Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudAutocomplete @bind-Value="employee.EmpIdentityProof.NationalIDTypeDesc"
                                                             Class="employee-autocomplete"
                                                             SearchFunc="SearchCountry!"
                                                             Variant="Variant.Text"
                                                             Label="National ID Type"
                                                             Margin="Margin.Dense"
                                                             Dense="true"
                                                             Placeholder="Please Select"
                                                             HelperText="Type a key to search for value"
                                                             HelperTextOnFocus="true"
                                                             Clearable="@_isCboClearable" 
                                                             Typo="Typo.subtitle2"
                                                             MaxItems="@(_countryList != null ? _countryList.Count : 10)"
                                                             Disabled="@_isDisabled"
                                                             Modal="true" />
                                        </MudPaper>
                                    </MudItem>     
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Issue" Editable="true" @bind-Date="employee.EmpIdentityProof.NatIDDateOfIssue" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.NatIDDateOfIssue = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.NatIDDateOfIssue = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Expiry" Editable="true" @bind-Date="employee.EmpIdentityProof.NatIDDateOfExpiry" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.NatIDDateOfExpiry = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.NatIDDateOfExpiry = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-id-badge" class="mr-3 pt-1" Style="font-size: 20px; color: #004165"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Others</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.TypeOfDocument" Label="Type of Document" HelperText="Max. text input is 50 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="50" MaxLength="50" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                     <MudItem xs="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.OtherDocNumber" Label="Document Number" HelperText="Max. text input is 30 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true"Counter="30" MaxLength="30" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Issue" Editable="true" @bind-Date="employee.EmpIdentityProof.OtherDocDateOfIssue" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.OtherDocDateOfIssue = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.OtherDocDateOfIssue = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Expiry" Editable="true" @bind-Date="employee.EmpIdentityProof.OtherDocDateOfExpiry" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.OtherDocDateOfExpiry = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.OtherDocDateOfExpiry = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-file-signature" class="mr-3 pt-1" Style="font-size: 20px; color: #004165"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Contract Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.ContractNumber" Label="Contract Number" HelperText="Max. text input is 30 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true" Counter="30" MaxLength="30" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                     <MudItem xs="4">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.ContractPlaceOfIssue" Label="Place of Issue" HelperText="Max. text input is 100 chars."
                                                Variant="Variant.Text" HelperTextOnFocus="true"Counter="100" MaxLength="100" 
                                                Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Issue" Editable="true" @bind-Date="employee.EmpIdentityProof.ContractDateOfIssue" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.ContractDateOfIssue = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.ContractDateOfIssue = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Expiry" Editable="true" @bind-Date="employee.EmpIdentityProof.ContractDateOfExpiry" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.ContractDateOfExpiry = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.ContractDateOfExpiry = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="p-0 m-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-passport" class="mr-3 pt-1" Style="font-size: 20px; color: #004165;"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Visa Details</strong></MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudAutocomplete @bind-Value="employee.EmpIdentityProof.VisaCountryDesc"
                                                             Class="employee-autocomplete"
                                                             SearchFunc="SearchCountry!"
                                                             Variant="Variant.Text"
                                                             Label="Country"
                                                             Margin="Margin.Dense"
                                                             Dense="true"
                                                             Placeholder="Please Select"
                                                             HelperText="Type a key to search for value"
                                                             HelperTextOnFocus="true"
                                                             Clearable="@_isCboClearable"
                                                             Typo="Typo.subtitle2"
                                                             MaxItems="@(_countryList != null ? _countryList.Count : 10)"
                                                             Disabled="@_isDisabled"
                                                             Modal="true" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudAutocomplete @bind-Value="employee.EmpIdentityProof.VisaTypeDesc"
                                                             Class="employee-autocomplete"
                                                             SearchFunc="SearchVisaType!"
                                                             Variant="Variant.Text"
                                                             Label="Visa Type"
                                                             Margin="Margin.Dense"
                                                             Dense="true"
                                                             Placeholder="Please Select"
                                                             HelperText="Type a key to search for value"
                                                             HelperTextOnFocus="true"
                                                             Clearable="@_isCboClearable" 
                                                             Typo="Typo.subtitle2"
                                                             MaxItems="@(_visaTypeList != null ? _visaTypeList.Count : 10)"
                                                             Disabled="@_isDisabled"
                                                             Modal="true" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.VisaNumber" Label="Visa Number" HelperText="Max. text input is 30 chars."
                                                          Variant="Variant.Text" HelperTextOnFocus="true" Counter="30" MaxLength="30"
                                                          Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>  
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.Profession" Label="Profession" HelperText="Max. text input is 100 chars."
                                                          Variant="Variant.Text" HelperTextOnFocus="true" Counter="100" MaxLength="100"
                                                          Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                                <MudGrid Spacing="5">
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudTextField @bind-Value="employee.EmpIdentityProof.Sponsor" Label="Sponsor" HelperText="Max. text input is 100 chars."
                                                          Variant="Variant.Text" HelperTextOnFocus="true" Counter="100" MaxLength="100"
                                                          Clearable="@_isClearable" Disabled="@_isDisabled" Immediate="true" Margin="Margin.Dense" Typo="Typo.subtitle2" />
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Issue" Editable="true" @bind-Date="employee.EmpIdentityProof.VisaDateOfIssue" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled" 
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.VisaDateOfIssue = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.VisaDateOfIssue = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudPaper Elevation="0" Class="p-0 w-100">
                                            <MudDatePicker Label="Date of Expiry" Editable="true" @bind-Date="employee.EmpIdentityProof.VisaDateOfExpiry" Margin="Margin.Dense" AutoClose="true" 
                                                HelperText="Enter date in dd/MM/yyyy format" HelperTextOnFocus="true" Clearable="@_isCboClearable" Disabled="@_isDisabled"
                                                Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="dd/MM/yyyy" Variant="Variant.Text">
                                                <PickerActions Context="dateContext">
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.VisaDateOfExpiry = DateTime.Today))">Today</MudButton>
                                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await this.InvokeAsync(() => employee.EmpIdentityProof.VisaDateOfExpiry = null))">Clear</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#identityPanel"
                                         VisibleCssClass="visible absolute"
                                         HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                         </MudScrollToTop>
                    </MudExpansionPanels>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Skill & Qualifications" ToolTip="Manage employee skill sets" Icon="@Icons.Material.Rounded.Equalizer">
                <div id="qualificationPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-graduation-cap" Size=Size.Small Style="color: #004165;" class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Qualifications</strong></MudText>
                                    <MudSpacer />  
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="QualificationDTO" Items="@employee.QualificationList" Hover="true" Striped="true" Class="skill-qualification-grid"
                                                 TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true" EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.QualificationDesc" Title="Qualification" Class="col-qualification" />
                                            <PropertyColumn Property="x => x.StreamDesc" Title="Stream" Width="150px" Class="col-stream" />
                                            <PropertyColumn Property="x => x.SpecializationDesc" Title="Specialization" Class="col-specialization" />
                                            <PropertyColumn Property="x => x.UniversityName" Title="University" Class="col-university" />
                                            <PropertyColumn Property="x => x.Institute" Width="100px" Class="col-institute" />
                                            <PropertyColumn Property="x => x.QualificationModeDesc" Title="Qualification Mode" Class="col-qualification-mode" />
                                            <PropertyColumn Property="x => x.CountryDesc" Title="Country" Width="120px" />
                                            <PropertyColumn Property="x => x.StateDesc" Title="State" Width="120px" />
                                            <PropertyColumn Property="x => x.CityTownName" Title="City" Width="120px" />
                                            <PropertyColumn Property="x => x.FromMonthDesc" Title="From Month" Width="130px" />
                                            <PropertyColumn Property="x => x.FromYear" Title="From Year" Width="130px" />
                                            <PropertyColumn Property="x => x.ToMonthDesc" Title="To Month" Width="130px" />
                                            <PropertyColumn Property="x => x.ToYear" Title="To Year" Width="130px" />
                                            <PropertyColumn Property="x => x.PassMonthDesc" Title="Pass Month" Width="130px" />
                                            <PropertyColumn Property="x => x.PassYear" Title="Pass Year" Width="130px" />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                    <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
                                         <div class="no-data-box">
                                             <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
                                             <span>No data found</span>
                                         </div>
                                    </NoRecordsContent>
                                    </MudDataGrid>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-user-tag" Style="color: #004165;" Size=Size.Small class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Skills</strong></MudText>
                                    <MudSpacer />
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="EmployeeSkillDTO" Items="@employee.EmployeeSkillList" Hover="true" Striped="true" Class="skill-grid"
                                        TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true"
                                        EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.SkillName" Title="Skill Name" Class="col-skillname" />
                                            <PropertyColumn Property="x => x.LevelDesc" Width="150px" Class="col-level" />
                                            <PropertyColumn Property="x => x.LastUsedMonthDesc" Title="Last Used Month" Class="col-LastUsedMonth" />
                                            <PropertyColumn Property="x => x.LastUsedYear" Title="Last Used Year" />
                                            <PropertyColumn Property="x => x.FromMonthDesc" Title="From Month" Class="col-FromMonth" />
                                            <PropertyColumn Property="x => x.FromYear" Title="From Year" />
                                            <PropertyColumn Property="x => x.ToMonthDesc" Title="To Month" />
                                            <PropertyColumn Property="x => x.ToYear" Title="To Year" />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                    <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                    </MudDataGrid>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-certificate" Style="color: #004165;" Size=Size.Small class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Certifications & Training</strong></MudText>
                                    <MudSpacer />
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="EmployeeCertificationDTO" Items="@employee.EmployeeCertificationList" Hover="true" Striped="true"
                                        TableClass="fixed-table" TableStyle="table-layout: fixed; width: 100%;" Class="certification-grid" 
                                        Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true" EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.AutoId" Hidden />
                                            <PropertyColumn Property="x => x.QualificationDesc" Class="col-Qualification" />
                                            <PropertyColumn Property="x => x.QualificationCode" Hidden />
                                            <PropertyColumn Property="x => x.StreamDesc" title="Stream" Class="col-Stream" />
                                            <PropertyColumn Property="x => x.StreamCode" Hidden />
                                            <PropertyColumn Property="x => x.Specialization" Class="col-Specialization" />
                                            <PropertyColumn Property="x => x.University" Class="col-University" />
                                            <PropertyColumn Property="x => x.Institute" Class="col-Institute" />
                                            <PropertyColumn Property="x => x.Country" Class="col-Country" />
                                            <PropertyColumn Property="x => x.CountryCode" Hidden />
                                            <PropertyColumn Property="x => x.State" Class="col-State" />                                        
                                            <PropertyColumn Property="x => x.CityTownName" Title="City" Class="col-City" />                                        
                                            <PropertyColumn Property="x => x.FromMonth" Title="From Month" />
                                            <PropertyColumn Property="x => x.FromMonthCode" Hidden />
                                            <PropertyColumn Property="x => x.FromYear" Title="From Year" />
                                            <PropertyColumn Property="x => x.ToMonth" Title="To Month" />
                                            <PropertyColumn Property="x => x.FromMonthCode" Hidden />
                                            <PropertyColumn Property="x => x.ToYear" Title="To Year" />
                                            <PropertyColumn Property="x => x.PassMonth" Title="Pass Month" />
                                            <PropertyColumn Property="x => x.PassMonthCode" Hidden />
                                            <PropertyColumn Property="x => x.PassYear" Title="Pass Year" />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                     <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                    </MudDataGrid>
                                 </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                         <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-globe" Style="color: #004165;" Size=Size.Small class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Languages</strong></MudText>
                                    <MudSpacer />
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="LanguageSkillDTO" Items="@employee.LanguageSkillList" Hover="true" Striped="true" Class="language-grid"
                                        TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true" EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.AutoId" Hidden />
                                            <PropertyColumn Property="x => x.LanguageDesc" title="Language" Class="col-language-desc" />
                                            <PropertyColumn Property="x => x.LanguageCode" Hidden />
                                            <PropertyColumn Property="x => x.CanReadDescription" Title="Can Read?" />
                                            <PropertyColumn Property="x => x.CanSpeakDescription" Title="Can Speak?" />
                                            <PropertyColumn Property="x => x.CanWriteDescription" Title="Can Write?" />
                                            <PropertyColumn Property="x => x.MotherTongueDescription" Title="Mother Tongue?" />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                     <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                         </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                     </MudDataGrid>
                                 </MudPaper>
                             </ChildContent>
                         </MudExpansionPanel>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#qualificationPanel"
                                         VisibleCssClass="visible absolute"
                                         HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                         </MudScrollToTop>
                    </MudExpansionPanels>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Family" ToolTip="Manage employee dependents" Icon="@Icons.Material.Rounded.FamilyRestroom">
                <div id="familyPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-users" Size=Size.Small Style="color: #004165;" class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Family Members</strong></MudText>
                                    <MudSpacer />  
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="FamilyMemberDTO" Items="@employee.FamilyMemberList" Hover="true" Striped="true" Class="family-member-grid"
                                        TableClass="fixed-table" Dense="false"ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true"
                                        EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.AutoId" Hidden />
                                            <PropertyColumn Property="x => x.FirstName" Title="First Name" Class="col-familyname" />
                                            <PropertyColumn Property="x => x.MiddleName" Title="Middle Name" Class="col-familyname" />
                                            <PropertyColumn Property="x => x.LastName" Title="Last Name" Class="col-familyname" />
                                            <PropertyColumn Property="x => x.RelationCode" Hidden />
                                            <PropertyColumn Property="x => x.Relation" Class="col-relation" />
                                            <PropertyColumn Property="x => x.DOB" Title="Date of Birth" Class="col-dob" />
                                            <PropertyColumn Property="x => x.QualificationCode" Hidden />
                                            <PropertyColumn Property="x => x.Qualification" Class="col-qualification" />
                                            <PropertyColumn Property="x => x.StreamCode" Hidden />
                                            <PropertyColumn Property="x => x.StreamDesc" Class="col-stream" />
                                            <PropertyColumn Property="x => x.SpecializationCode" Hidden />
                                            <PropertyColumn Property="x => x.Specialization" Class="col-specialization" />
                                            <PropertyColumn Property="x => x.Occupation" Class="col-occupation" />
                                            <PropertyColumn Property="x => x.ContactNo" Class="col-contact" />
                                            <PropertyColumn Property="x => x.CountryCode" Hidden />
                                            <PropertyColumn Property="x => x.Country" Class="col-country" />
                                            <PropertyColumn Property="x => x.StateCode" Hidden />
                                            <PropertyColumn Property="x => x.State" Class="col-state" />
                                            <PropertyColumn Property="x => x.CityTownName" Class="col-city" />
                                            <PropertyColumn Property="x => x.District" Class="col-district" />
                                             <PropertyColumn Property="x => x.IsDependentDesc" Title="Is Dependent?" Class="flex-column" />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                     <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
                                              <div class="no-data-box">
                                                  <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
                                                  <span>No data found</span>
                                              </div>
                                         </NoRecordsContent>
                                    </MudDataGrid>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                         <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-file-alt" Size=Size.Small Style="color: #004165;" class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Family Visa Details</strong></MudText>
                                    <MudSpacer />
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="FamilyVisaDTO" Items="@employee.FamilyVisaList" Hover="true" Striped="true" Class="family-visa-grid"
                                        TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true" EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.AutoId" Hidden />
                                            <PropertyColumn Property="x => x.FamilyId" Hidden />
                                            <PropertyColumn Property="x => x.FamilyMemberName" Title="Family Name" Class="col-family-name" />
                                            <PropertyColumn Property="x => x.CountryCode" Hidden />
                                            <PropertyColumn Property="x => x.Country" Class="col-country" />
                                            <PropertyColumn Property="x => x.VisaTypeCode" Hidden />
                                            <PropertyColumn Property="x => x.VisaType" Title="Visa Type" Class="col-visa-type" />
                                            <PropertyColumn Property="x => x.Profession" Class="col-profession" />
                                            <PropertyColumn Property="x => x.IssueDate" Title="Date of Issue" Class="col-issue-date">
                                                <CellTemplate Context="row">
                                                    @row.Item.IssueDate?.ToString("dd-MMM-yyyy")
                                                </CellTemplate>
                                            </PropertyColumn>
                                            <PropertyColumn Property="x => x.ExpiryDate" Title="Date of Expiry">
                                                <CellTemplate Context="row">
                                                    @row.Item.ExpiryDate?.ToString("dd-MMM-yyyy")
                                                </CellTemplate>
                                            </PropertyColumn>
                                             <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                 <CellTemplate Context="row">
                                                    <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                 </CellTemplate>
                                             </TemplateColumn>
                                         </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                     </MudDataGrid>
                                 </MudPaper>
                             </ChildContent>
                         </MudExpansionPanel>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#familyPanel"
                                        VisibleCssClass="visible absolute"
                                        HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                        </MudScrollToTop>
                    </MudExpansionPanels>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Employment History" ToolTip="Manage employment records" Icon="@Icons.Material.Rounded.WorkHistory">
                <div id="employmentPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-history" Size=Size.Small Style="color: #004165;" class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Past Employment</strong></MudText>
                                    <MudSpacer />
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="EmploymentHistoryDTO" Items="@employee.EmploymentHistoryList" Hover="true" Striped="true" Class="employment-history-grid" 
                                        TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true"
                                        EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.AutoId" Hidden />
                                             <PropertyColumn Property="x => x.CompanyName" Title="Company Name" Class="col-company-name" />
                                             <PropertyColumn Property="x => x.CompanyAddress" Title="Company Address" Class="col-company-address" />
                                            <PropertyColumn Property="x => x.Designation" Class="col-designation" />
                                            <PropertyColumn Property="x => x.Role" Class="col-role" />
                                             <PropertyColumn Property="x => x.FromDate" Title="From Date" Class="col-date">
                                                 <CellTemplate Context="row">
                                                     @row.Item.FromDate?.ToString("dd-MMM-yyyy")
                                                </CellTemplate>
                                            </PropertyColumn>
                                            <PropertyColumn Property="x => x.ToDate" Title="To Date" Class="col-date">
                                                <CellTemplate Context="row">
                                                    @row.Item.ToDate?.ToString("dd-MMM-yyyy")
                                                </CellTemplate>
                                            </PropertyColumn>
                                            <PropertyColumn Property="x => x.LastDrawnSalary" Title="Last Drawn Salary" Class="col-salary">
                                                <CellTemplate Context="row">
                                                    @string.Format("{0:C3}", @row.Item.LastDrawnSalary)
                                                </CellTemplate>
                                            </PropertyColumn>
                                            <PropertyColumn Property="x => x.SalaryTypeCode" Hidden />
                                            <PropertyColumn Property="x => x.SalaryType" Title="Salary Type" Class="col-salary-type" />
                                            <PropertyColumn Property="x => x.SalaryCurrencyCode" Hidden />
                                            <PropertyColumn Property="x => x.SalaryCurrency" Title="Currency" Class="col-currency" />
                                            <PropertyColumn Property="x => x.ReasonOfChange" Title="Reason of Change" Class="col-reason" />
                                            <PropertyColumn Property="x => x.ReportingManager" Title="Reporting Manager" Class="col-manager" />
                                            <PropertyColumn Property="x => x.CompanyWebsite" Title="Company Website" Class="col-website" />
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                    <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                             <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                    </MudDataGrid>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#employmentPanel"
                                        VisibleCssClass="visible absolute"
                                        HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                        </MudScrollToTop>
                    </MudExpansionPanels>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Undertakings" ToolTip="Manage contract details" Icon="@Icons.Material.Rounded.CleanHands" Visible="false">
                <MudPaper Elevation="4" Class="d-flex align-center justify-center mud-width-full bg-primary">
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Text="Update History" ToolTip="Manage employee detail changes" Icon="@Icons.Material.Rounded.Update">
                <div id="updateHistoryPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudStack Row="false" AlignItems="AlignItems.Stretch" Spacing="5" Wrap="Wrap.NoWrap">
                        <MudPaper Elevation="0" Class="p-0 d-flex">
                             <MudChip T="string" Label="true" Icon="fas fa-check-circle" Size=Size.Medium Color="Color.Info" Style="font-size: 12px;">All</MudChip>
                             <MudChip T="string" Label="true" Icon="fas fa-hourglass-half" Size=Size.Medium Color="Color.Warning">Pending</MudChip>
                             <MudChip T="string" Label="true" Icon="fas fa-thumbs-up" Size=Size.Medium Color="Color.Success">Approved</MudChip>
                             <MudChip T="string" Label="true" Icon="far fa-thumbs-up" Size=Size.Medium Color="Color.Error">Rejected</MudChip>
                            <MudSpacer />
                            <MudPaper Elevation="0" Class="employee-menu">
                                <MudSelect @bind-Value="_selectedMenu" Variant="Variant.Filled" Margin="Margin.Dense" Label="Menu"
                                            Placeholder="Select Transaction Type" AdornmentIcon="@Icons.Material.Filled.MenuOpen" AdornmentColor="Color.Default"
                                            Clearable="@_isClearable" Immediate="true" Typo="Typo.subtitle2">
                                    @foreach (var menu in _employeeMenu)
                                    {
                                        <MudSelectItem Value="menu">@menu</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudPaper>
                        </MudPaper>
                        <MudPaper Elevation="0" Class="p-0">
                            <div class="update-history-grid">
                                <MudDataGrid T="EmployeeTransactionDTO" Items="@employee.EmployeeTransactionList" Hover="true" Striped="true"
                                             TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true"
                                             EditMode="DataGridEditMode.Form">
                                    <Columns>
                                        <PropertyColumn Property="x => x.AutoId" Hidden />
                                        <PropertyColumn Property="x => x.StatusCode" Hidden />
                                        <PropertyColumn Property="x => x.SectionCode" Hidden />
                                        <PropertyColumn Property="x => x.EmployeeNo" Hidden />
                                        <PropertyColumn Property="x => x.TransactionNo" Hidden />
                                        <PropertyColumn Property="x => x.ActionDesc" Title="Action Taken" Class="col-action-taken" />
                                        <PropertyColumn Property="x => x.Section" Class="col-section" />
                                        <PropertyColumn Property="x => x.Status" Class="col-status">
                                             <CellTemplate Context="row">
                                                 <MudChip T="string" Size=Size.Small Color="@(row.Item.StatusCode == "APPROVED" ? Color.Success 
                                                 : row.Item.StatusCode == "REJECTED" ? Color.Error
                                                 : row.Item.StatusCode == "OPEN" ? Color.Warning
                                                 : Color.Info)">@row.Item.Status</MudChip>
                                            </CellTemplate>
                                        </PropertyColumn>    
                                            <PropertyColumn Property="x => x.CurrentAssignedEmployee" Title="Currently Assigned To" Class="col-assignedto" />
                                        <PropertyColumn Property="x => x.LastUpdateOn" Title="Last Updated On" Class="col-last-update">
                                            <CellTemplate Context="row">
                                                    @row.Item.LastUpdateOn?.ToString("dd-MMM-yyyy hh:mm tt")
                                            </CellTemplate>
                                        </PropertyColumn>
                                     </Columns>
                                 </MudDataGrid>
                             </div>
                        </MudPaper>
                        <MudScrollToTop TopOffset="100"
                                        Selector="#updateHistoryPanel"
                                        VisibleCssClass="visible absolute"
                                        HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                        </MudScrollToTop>
                    </MudStack>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Documents" ToolTip="Manage employee-related documents" Icon="@Icons.Material.Rounded.DocumentScanner">
                <div id="otherDocsPanel" class="ma-0 full-height" style="overflow-y: scroll; scrollbar-width: none;">
                    <MudExpansionPanels Elevation="0" MultiExpansion="true">
                        <MudExpansionPanel Class="pt-0 mt-0" Dense Gutters Expanded>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="fas fa-history" Size=Size.Small Style="color: #004165;" class="mr-3"></MudIcon>
                                    <MudText Typo="Typo.subtitle1" Style="text-decoration: underline; color: #004165;"><strong>Documents</strong></MudText>
                                    <MudSpacer />
                                    <MudFab Style="background-color: #004165; color: white;" StartIcon="@Icons.Material.Filled.Add" Size=Size.Small Class="mr-3" />
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudPaper Elevation="4" Square="true" Class="w-100">
                                    <MudDataGrid T="OtherDocumentDTO" Items="@employee.OtherDocumentList" Hover="true" Striped="true" Class="document-grid"
                                        TableClass="fixed-table" Dense="false" ColumnResizeMode="ResizeMode.Column" HorizontalScrollbar="true"
                                        EditMode="DataGridEditMode.Form">
                                        <Columns>
                                            <PropertyColumn Property="x => x.AutoId" Hidden />
                                            <PropertyColumn Property="x => x.DocumentTypeCode" Hidden />
                                            <PropertyColumn Property="x => x.DocumentTypeDesc" Title="Document Type" Class="col-document-type" />
                                            <PropertyColumn Property="x => x.DocumentName" Title="Name" Class="col-document-name" />
                                            <PropertyColumn Property="x => x.Description" Class="col-description" />
                                            <PropertyColumn Property="x => x.FileExtension" Title="File Ext." Class="col-file-ext" />
                                            <PropertyColumn Property="x => x.ContentTypeCode" Title="Content Type" Class="col-content-type" />
                                            <PropertyColumn Property="x => x.UploadDate" Title="Uloaded On" Class="col-uploadedon">
                                                 <CellTemplate Context="row">
                                                     @row.Item.UploadDate?.ToString("dd-MMM-yyyy")
                                                </CellTemplate>
                                            </PropertyColumn>
                                            <TemplateColumn Hidden="false" CellClass="d-flex justify-end">
                                                <CellTemplate Context="row">
                                                    <MudIconButton Color="Color.Info" title="Edit record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            ,<i class="fas fa-edit fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Primary" title="Download file" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-download fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Secondary" title="View file" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-eye fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Success" title="Save changes" Class="hide-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-save fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                    <MudIconButton Color="Color.Error" title="Delete record" Class="show-btn fa-icon-btn" OnClick="@row.Actions.StartEditingItemAsync">
                                                        <ChildContent>
                                                            <i class="fas fa-trash-alt fa-1x"></i>
                                                        </ChildContent>
                                                    </MudIconButton>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                        <NoRecordsContent>
			                                 <div class="no-data-box">
				                                 <MudIcon Icon="@Icons.Material.Filled.Info" Class="no-data-icon" />
				                                 <span>No data found</span>
			                                 </div>
		                                </NoRecordsContent>
                                    </MudDataGrid>
                                </MudPaper>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudScrollToTop TopOffset="100"
                                         Selector="#otherDocsPanel"
                                        VisibleCssClass="visible absolute"
                                        HiddenCssClass="hidden absolute">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color.Error">Go to top</MudButton>
                        </MudScrollToTop>
                    </MudExpansionPanels>
                </div>
            </MudTabPanel>
        </MudTabs>
    </EditForm>
</MudContainer>
<!-- Full-screen overlay -->
@if (_isRunning)
{
    <div class="fullscreen-overlay">
        <MudProgressCircular Indeterminate="true" Size="Size.Medium" Color="Color.Info" />
        <MudText Typo="Typo.h6" Class="mt-2 text-white">@overlayMessage</MudText>
    </div>
}

@code {
    #region Fields
    private List<EmployeeDTO> employees = new();
    private EmployeeDTO employee = new();
    private StringBuilder _errorMessage = new StringBuilder();
    private List<string> _notifications = new();
    private string overlayMessage = "Please wait...";
    private string _selectedMenu = string.Empty;      
    private string firstName = "";
    private string middleName = "";
    private string lastName = "";
    private string position = "";
    public string HelperText { get; set; } = null!;    

    private EditContext? _editContext;
    private List<string> _validationMessages = new();
    private CancellationTokenSource? _cts;

    #region System Flags
    private bool _isRunning = false;
    private bool _isDisabled = false;
    private bool _isEditMode = false;
    private bool _isClearable = false;
    private bool _isCboClearable = true;
    private bool _saveBtnEnabled = false;
    private bool _showErrorAlert = false;   
    private bool _hasValidationError = false;
    private static bool _forceLoad = false;
    #endregion

    #region User Defined Codes
    private List<UserDefinedCodeDTO> _salutationList = new List<UserDefinedCodeDTO>();
    private string[]? _salutationArray = null;

    private List<UserDefinedCodeDTO> _religionList = new List<UserDefinedCodeDTO>();
    private string[]? _religionArray = null;

    private List<UserDefinedCodeDTO> _countryList = new List<UserDefinedCodeDTO>();
    private string[]? _countryArray = null;

    private List<UserDefinedCodeDTO> _genderList = new List<UserDefinedCodeDTO>();
    private string[]? _genderArray = null;

    private List<UserDefinedCodeDTO> _maritalStatusList = new List<UserDefinedCodeDTO>();
    private string[]? _maritalStatusArray = null;

    private List<UserDefinedCodeDTO> _employeeStatusList = new List<UserDefinedCodeDTO>();
    private string[]? _employeeStatusArray = null;

    private List<UserDefinedCodeDTO> _employeeClassList = new List<UserDefinedCodeDTO>();
    private string[]? _employeeClassArray = null;

    private List<UserDefinedCodeDTO> _educationLevelList = new List<UserDefinedCodeDTO>();
    private string[]? _educationLevelArray = null;

    private List<UserDefinedCodeDTO> _accountTypeList = new List<UserDefinedCodeDTO>();
    private string[]? _accountTypeArray = null;

    private List<UserDefinedCodeDTO> _bankList = new List<UserDefinedCodeDTO>();
    private string[]? _bankArray = null;

    private List<UserDefinedCodeDTO> _jobTitleList = new List<UserDefinedCodeDTO>();
    private string[]? _jobTitleArray = null;

    private List<UserDefinedCodeDTO> _payGradeList = new List<UserDefinedCodeDTO>();
    private string[]? _payGradeArray = null;

    private List<UserDefinedCodeDTO> _companyBranchList = new List<UserDefinedCodeDTO>();
    private string[]? _companyBranchArray = null;

    private List<UserDefinedCodeDTO> _visaTypeList = new List<UserDefinedCodeDTO>();
    private string[]? _visaTypeArray = null;

    private List<UserDefinedCodeDTO> _nationalIDTypeList = new List<UserDefinedCodeDTO>();
    private string[]? _nationalIDTypeArray = null;

    private IReadOnlyList<DepartmentDTO> _departmentList = new List<DepartmentDTO>();
    private string[]? _departmentArray = null;

    private IReadOnlyList<EmployeeDTO> _managerList = new List<EmployeeDTO>();
    private string[]? _managerArray = null;

    private IReadOnlyList<UserDefinedCodeDTO> _employmentTypeList = new List<UserDefinedCodeDTO>();
    private string[]? _employmentTypeArray = null;

    private List<UserDefinedCodeDTO> _attendanceModeList = new List<UserDefinedCodeDTO>();
    private string[]? _attendanceModeArray = null;

    private List<UserDefinedCodeDTO> _roleTypeList = new List<UserDefinedCodeDTO>();
    private string[]? _roleTypeArray = null;
    #endregion

    #region Enums and Collections
    private enum ActionTypes
    {
        View,
        Edit,
        Add,
        Delete
    }

    private enum UDCGroupCodes
    {
        EMPSTATUS,	    // Employee Status
        EMPLOYTYPE,	    // Employment Type
        COUNTRY,	    // Countries
        RELIGION,	    // Religions
        GENDER,	        // Gender
        MARSTAT,	    // Marital Status
        SALUTE,	        // Salutations
        DEPARTMENT,	    // Departments
        EMPCLASS,       // Employee Class
        EDUCLEVEL,      // Education LevelDesc
        ACCOUNTTYPE,    // Personal Banking Accounts
        BANKNAME,       // Bank Names
        JOBTITLE,	    // Job Titles
        PAYGRADE,	    // Pay Grades
        COMPANYBRANCH,	// Company Branches
        VISATYPE,       // Visa Types
        NATIONALITYTYPE,	// Nationality ID Types
        ATTENDANCEMODE,     // Attendance Modes
        ROLETYPES           // Role Types
    }

    private enum NotificationType
    {
        Normal,
        Information,
        Success,
        Warning,
        Error
    }

    private List<BreadcrumbItem> _breadcrumbItems =
    [
        new("Home", href: "/", icon: Icons.Material.Filled.Home),
        new("Employee Master", href: "/CoreHR/employeesearch", icon: @Icons.Material.Filled.PeopleAlt),
        new("Employee Detail", href: null, disabled: true, @Icons.Material.Filled.EditNote)
    ];
    #endregion

    #region Button Icons
    private readonly string _iconDelete = "fas fa-trash-alt";
    private readonly string _iconCancel = "fas fa-window-close";
    #endregion

    #endregion

    #region Parameters and Injections
    [Parameter]
    [SupplyParameterFromQuery]
    public string DepartmentCacheKey { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string EmployeeCacheKey { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string EmploymentTypeCacheKey { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public int EmployeeId { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery]
    public string ActionType { get; set; } = ActionTypes.View.ToString();    

    [Parameter]
    public IReadOnlyList<DepartmentDTO> Departments { get; set; } = Array.Empty<DepartmentDTO>();
    #endregion

    #region Page Events
    public void Dispose()
    {
        // Cleanup resources
        Logger.LogInformation("Employee page disposed");
    }

    protected override async Task OnInitializedAsync()
    {        
        // Initialize the EditContext 
        _editContext = new EditContext(employee);

        if (ActionType == ActionTypes.Edit.ToString() ||
            ActionType == ActionTypes.View.ToString())
        {
            _isDisabled = true;

            if (EmployeeId > 0)
                BeginGetEmployeeDetailTask();
        }
        else if (ActionType == ActionTypes.Add.ToString())
        {
            _isDisabled = false;
            _saveBtnEnabled = true;

            #region Get the maximum Employee No. to use
            var maxEmpResult = await EmployeeService.GetMaxEmployeeNoAsync();
            if (maxEmpResult.Success)
            {
                // Initialize new employee
                employee = new EmployeeDTO()
                {
                    EmployeeId = 0,
                    EmployeeNo = maxEmpResult.Value,
                    IsActive = true,
                    HireDate = DateTime.Now,
                    FirstName = string.Empty,
                    LastName = string.Empty,
                    Position = string.Empty
                };

                // Reinitialize the EditContext
                _editContext = new EditContext(employee);
            }
            else
            {
                // Set the error message
                _errorMessage.AppendLine(maxEmpResult.Error);
            }
            #endregion

            await PopulateDropDownBoxes();

            if (_errorMessage.Length > 0)
                ShowHideError(true);
        }
    }

    protected override void OnParametersSet()
    {
        // Reset error display when navigating to page
        _hasValidationError = false;
    }

    // This will be triggered by validation errors automatically
    // Trick: ValidationSummary only shows if there are errors
    // So we set hasErrors = true if any validation fails
    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (firstRender) return;

    //     var context = new ValidationContext(employee);
    //     var results = new List<ValidationResult>();
    //     _hasValidationError = !Validator.TryValidateObject(employee, context, results, true);
    // }
    #endregion

    #region Button Event Handlers
    private void HandleUndoChanges()
    {
        // Set flag to display the loading panel
        _isRunning = true;

        // Set the overlay message
        overlayMessage = "Undoing changes, please wait...";

        _ = GetEmployeeDetailAsync(async () =>
        {
            // Reset the flags
            _isEditMode = false;
            _isDisabled = true;
            _isRunning = false;

            _hasValidationError = false;
            _validationMessages.Clear();

            // Reset error messages
            _errorMessage.Clear();
            ShowHideError(false);

            // Shows the spinner overlay
            await InvokeAsync(StateHasChanged);
        });
    }

    private void HandleRefreshPage()
    {
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

        if (EmployeeId > 0)
        {
            BeginGetEmployeeDetailTask();
        }
    }

    private void CancelAddEmployee()
    {
        Navigation.NavigateTo("/CoreHR/employeesearch");
    }   

    private async Task ShowDeleteDialog()
    {
        var parameters = new DialogParameters
        {
            { "DialogTitle", "Confirm Delete"},
            { "DialogIcon", _iconDelete },
            { "ContentText", "Do you really want to delete this record? Note that this process cannot be undone." },
            { "ConfirmText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter, CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Confirmation:", parameters, options);
        
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            BeginDeleteEmployee();
        }
    }

    private async Task ShowCancelDialog()
    {
        var parameters = new DialogParameters
        {
            { "DialogTitle", "Confirm Cancel"},
            { "DialogIcon", _iconCancel },
            { "ContentText", "Do you really want to cancel adding new employee record?" },
            { "ConfirmText", "Yes" },
            { "CancelText", "No" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter, CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Cancel Confirmation:", parameters, options);
        
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            CancelAddEmployee();
        }
    }
    #endregion

    #region Async Events
    private void BeginGetEmployeeDetailTask()
    {
        _isRunning = true;

        // Set the overlay message
        overlayMessage = "Loading employee details, please wait...";

        _ = GetEmployeeDetailAsync(async () =>
        {
            _isRunning = false;

            // Shows the spinner overlay
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task GetEmployeeDetailAsync(Func<Task> callback)
    {
        // Wait for 1 second then gives control back to the runtime
        await Task.Delay(1000);

        // Reset error messages
        _errorMessage.Clear();

        var result = await EmployeeService.GetEmployeeDetailAsync(EmployeeId);
        if (result.Success)
        {
            employee = result.Value!;     

            // Recreate the EditContext with the loaded employee
            _editContext = new EditContext(employee);
        }
        else
        {
            // Set the error message
            _errorMessage.Append(result.Error);

            ShowHideError(true);
        }

        #region Populate datagrid for testing purposes
        employee.EmployeeTransactionList = await EmployeeService.GetEmployeeTransactionAsync();
        #endregion

        if (callback != null)
        {
            // Hide the spinner overlay
            await callback.Invoke();
        }
    }

    private async Task SaveChangeAsync(Func<Task> callback)
    {
        // Wait for 1 second then gives control back to the runtime
        await Task.Delay(500);

        // Reset error messages
        _errorMessage.Clear();      

        #region Get the combobox selected values
        UserDefinedCodeDTO? udc = null;

        if (!string.IsNullOrEmpty(employee.ReportingManager))
        {
            EmployeeDTO? selectedManager = _managerList.Where(a => a.EmployeeFullName == employee.ReportingManager).FirstOrDefault(); 
            if (selectedManager != null)
                employee.ReportingManagerCode = selectedManager.EmployeeNo;
        }

        if (!string.IsNullOrEmpty(employee.SecondReportingManager))
        {
            EmployeeDTO? selectedManager = _managerList.Where(a => a.EmployeeFullName == employee.SecondReportingManager).FirstOrDefault();
            if (selectedManager != null)
                employee.SecondReportingManagerCode = selectedManager.EmployeeNo;
        }

        if (!string.IsNullOrEmpty(employee.DepartmentName))
        {
            DepartmentDTO? selectedDepartment = _departmentList.Where(a => a.DepartmentName == employee.DepartmentName).FirstOrDefault(); 
            if (selectedDepartment != null)
                employee.DepartmentCode = selectedDepartment.DepartmentCode;
        }

        if (!string.IsNullOrEmpty(employee.NationalityDesc))
        {
            udc = _countryList.Where(a => a.UDCDesc1 == employee.NationalityDesc).FirstOrDefault(); 
            if (udc != null)
                employee.NationalityCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.ReligionDesc))
        {
            udc = _religionList.Where(a => a.UDCDesc1 == employee.ReligionDesc).FirstOrDefault(); 
            if (udc != null)
                employee.ReligionCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.GenderDesc))
        {
            udc = _genderList.Where(a => a.UDCDesc1 == employee.GenderDesc).FirstOrDefault(); 
            if (udc != null)
                employee.GenderCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.MaritalStatusDesc))
        {
            udc = _maritalStatusList.Where(a => a.UDCDesc1 == employee.MaritalStatusDesc).FirstOrDefault(); 
            if (udc != null)
                employee.MaritalStatusCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.SalutationDesc))
        {
            udc = _salutationList.Where(a => a.UDCDesc1 == employee.SalutationDesc).FirstOrDefault(); 
            if (udc != null)
                employee.Salutation = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.EmployeeStatusDesc))
        {
            udc = _employeeStatusList.Where(a => a.UDCDesc1 == employee.EmployeeStatusDesc).FirstOrDefault(); 
            if (udc != null)
                employee.EmployeeStatusCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.EmployeeStatusDesc))
        {
            udc = _employeeStatusList.Where(a => a.UDCDesc1 == employee.EmployeeStatusDesc).FirstOrDefault();
            if (udc != null)
                employee.EmployeeStatusCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.EmploymentType))
        {
            udc = _employmentTypeList.Where(a => a.UDCDesc1 == employee.EmploymentType).FirstOrDefault();
            if (udc != null)
                employee.EmploymentTypeCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.RoleType))
        {
            udc = _roleTypeList.Where(a => a.UDCDesc1 == employee.RoleType).FirstOrDefault();
            if (udc != null)
                employee.RoleCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.FirstAttendanceMode))
        {
            udc = _attendanceModeList.Where(a => a.UDCDesc1 == employee.FirstAttendanceMode).FirstOrDefault();
            if (udc != null)
                employee.FirstAttendanceModeCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.SecondAttendanceMode))
        {
            udc = _attendanceModeList.Where(a => a.UDCDesc1 == employee.SecondAttendanceMode).FirstOrDefault();
            if (udc != null)
                employee.SecondAttendanceModeCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.ThirdAttendanceMode))
        {
            udc = _attendanceModeList.Where(a => a.UDCDesc1 == employee.ThirdAttendanceMode).FirstOrDefault();
            if (udc != null)
                employee.ThirdAttendanceModeCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.CompanyBranchDesc))
        {
            udc = _companyBranchList.Where(a => a.UDCDesc1 == employee.CompanyBranchDesc).FirstOrDefault();
            if (udc != null)
                employee.CompanyBranch = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.EducationDesc))
        {
            udc = _educationLevelList.Where(a => a.UDCDesc1 == employee.EducationDesc).FirstOrDefault();
            if (udc != null)
                employee.EducationCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.EmployeeClassDesc))
        {
            udc = _employeeClassList.Where(a => a.UDCDesc1 == employee.EmployeeClassDesc).FirstOrDefault();
            if (udc != null)
                employee.EmployeeClassCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.JobTitleDesc))
        {
            udc = _jobTitleList.Where(a => a.UDCDesc1 == employee.JobTitleDesc).FirstOrDefault();
            if (udc != null)
                employee.JobTitleCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.PayGradeDesc))
        {
            udc = _payGradeList.Where(a => a.UDCDesc1 == employee.PayGradeDesc).FirstOrDefault();
            if (udc != null)
                employee.PayGrade = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.AccountTypeDesc))
        {
            udc = _accountTypeList.Where(a => a.UDCDesc1 == employee.AccountTypeDesc).FirstOrDefault();
            if (udc != null)
                employee.AccountTypeCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.BankName))
        {
            udc = _bankList.Where(a => a.UDCDesc1 == employee.BankName).FirstOrDefault();
            if (udc != null)
                employee.BankNameCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.PresentCountryDesc))
        {
            udc = _countryList.Where(a => a.UDCDesc1 == employee.PresentCountryDesc).FirstOrDefault();
            if (udc != null)
                employee.PresentCountryCode = udc.UDCCode;
        }

        if (!string.IsNullOrEmpty(employee.PermanentCountryDesc))
        {
            udc = _countryList.Where(a => a.UDCDesc1 == employee.PermanentCountryDesc).FirstOrDefault();
            if (udc != null)
                employee.PermanentCountryCode = udc.UDCCode;
        }

        #region Identity Proof dropdowns
        if (employee.EmpIdentityProof != null)
        {
            if (!string.IsNullOrEmpty(employee.EmpIdentityProof.NationalIDTypeDesc))
            {
                udc = _countryList.Where(a => a.UDCDesc1 == employee.EmpIdentityProof.NationalIDTypeDesc).FirstOrDefault();
                if (udc != null)
                    employee.EmpIdentityProof.NationalIDTypeCode = udc.UDCCode;
            }

            if (!string.IsNullOrEmpty(employee.EmpIdentityProof.VisaTypeDesc))
            {
                udc = _visaTypeList.Where(a => a.UDCDesc1 == employee.EmpIdentityProof.VisaTypeDesc).FirstOrDefault();
                if (udc != null)
                    employee.EmpIdentityProof.VisaTypeCode = udc.UDCCode;
            }

            if (!string.IsNullOrEmpty(employee.EmpIdentityProof.VisaCountryDesc))
            {
                udc = _countryList.Where(a => a.UDCDesc1 == employee.EmpIdentityProof.VisaCountryDesc).FirstOrDefault();
                if (udc != null)
                    employee.EmpIdentityProof.VisaCountryCode = udc.UDCCode;
            }
        }
        #endregion

        #endregion

        // Initialize the cancellation token
        _cts = new CancellationTokenSource();

        bool isSuccess = false;
        string errorMsg = string.Empty;

        if (employee.EmployeeId == 0)
        {
            var addResult = await EmployeeService.AddEmployeeAsync(employee, _cts.Token);
            isSuccess = addResult.Success;
            if (!isSuccess)
                errorMsg = addResult.Error!;
            else
            {
                // Set flag to enable reload of employees when navigating back to the Employe Search page
                _forceLoad = true;
            }
        }
        else
        {
            var saveResult = await EmployeeService.SaveEmployeeAsync(employee, _cts.Token);
            isSuccess = saveResult.Success;
            if (!isSuccess)
                errorMsg = saveResult.Error!;
        }

        if (isSuccess)
        {
            // Reset flags
            _isEditMode = false;
            _saveBtnEnabled = false;
            _isDisabled = true;

            // Show notification
            ShowNotification("Employee data saved successfully!", NotificationType.Success);
        }
        else
        {
            // Set the error message
            _errorMessage.AppendLine(errorMsg);
            ShowHideError(true);
        }

        if (callback != null)
        {
            // Hide the spinner overlay
            await callback.Invoke();
        }
    }

    private async Task DeleteEmployeeAsync(Func<Task> callback)
    {
        // Wait for 1 second then gives control back to the runtime
        await Task.Delay(500);

        // Reset error messages
        _errorMessage.Clear();      

        // Initialize the cancellation token
        _cts = new CancellationTokenSource();

        bool isSuccess = false;
        string errorMsg = string.Empty;

        if (employee.EmployeeId == 0)
        {
            errorMsg = "Employee ID is not defined.";
        }
        else
        {
            var deleteResult = await EmployeeService.DeleteEmployeeAsync(employee.EmployeeId, _cts.Token);
            isSuccess = deleteResult.Success;
            if (!isSuccess)
                errorMsg = deleteResult.Error!;
        }

        if (isSuccess)
        {
            // Show notification
            ShowNotification("Employee record has been deleted successfully!", NotificationType.Success);                        
        }
        else
        {
            if (!string.IsNullOrEmpty(errorMsg))
            {
                // Display error message
                _errorMessage.AppendLine(errorMsg);
                ShowHideError(true);
            }
        }

        if (callback != null)
        {
            // Hide the spinner overlay
            await callback.Invoke();
        }
    }
    #endregion

    #region Initialize Collections
    private readonly string[] _employeeMenu =
    {
        "About Me", "Address", "Identity Proofs", "Skills & Qualifications", "Family",
        "Employment History", "Documents"
    };
    #endregion

    #region Data Validation Methods
    private void HandleInvalidSubmit(EditContext context)
    {
        _hasValidationError = true; 
        _validationMessages = context.GetValidationMessages().ToList();
        // ShowNotification("Please fix the errors and try again.", NotificationType.Error);
    }

    private void HandleValidSubmit(EditContext context)
    {
        try     
        {
            // If we got here, model is valid
            _hasValidationError = false;
            _validationMessages.Clear();

            // Set flag to display the loading panel
            _isRunning = true;

            // Set the overlay message
            overlayMessage = "Saving changes, please wait...";

            _ = SaveChangeAsync(async () =>
            {
                _isRunning = false;

                // Shows the spinner overlay
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (OperationCanceledException)
        {
            ShowNotification("Save cancelled (navigated away).", NotificationType.Warning);
        }
        catch (Exception ex)
        {
            ShowNotification($"Error: {ex.Message}", NotificationType.Error);
        }
    }

    private void BeginDeleteEmployee()
    {
        try     
        {
            // Set flag to display the loading panel
            _isRunning = true;

            // Set the overlay message
            overlayMessage = "Deleting employee record, please wait...";

            _ = DeleteEmployeeAsync(async () =>
            {
                _isRunning = false;

                // Shows the spinner overlay
                await InvokeAsync(StateHasChanged);

                // Go back to the Employee Search page
                Navigation.NavigateTo($"/CoreHR/employeesearch?ForceLoad={true.ToString()}");
            });
        }
        catch (OperationCanceledException)
        {
            ShowNotification("Delete cancelled (navigated away).", NotificationType.Warning);
        }
        catch (Exception ex)
        {
            ShowNotification($"Error: {ex.Message}", NotificationType.Error);
        }
    }
    #endregion

    #region Private Methods
    private void ShowNotification(string message, NotificationType type)
    {
        Snackbar.Clear();

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.PreventDuplicates = false;
        Snackbar.Configuration.NewestOnTop = false;
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.VisibleStateDuration = 5000;
        Snackbar.Configuration.HideTransitionDuration = 500;
        Snackbar.Configuration.ShowTransitionDuration = 500;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;

        switch(type)
        {
            case NotificationType.Information:
                Snackbar.Add(message, Severity.Info);
                break;            

            case NotificationType.Success:
                Snackbar.Add(message, Severity.Success);
                break; 

            case NotificationType.Warning:
                Snackbar.Add(message, Severity.Warning);
                break; 

            case NotificationType.Error:
                Snackbar.Add(message, Severity.Error);
                break; 

            default:
                Snackbar.Add(message, Severity.Normal);
                break;
        }

        // Snackbar.Add($"Error {message}", Severity.Error, c => c.SnackbarVariant = Variant.Filled);
    }

    private void ShowHideError(bool value)
    {
        if (value)
        {
            _showErrorAlert = true;
        }
        else
        {
            _showErrorAlert = false;   

            // Reset error messages
            _errorMessage.Clear();
        }
    }

    private async Task AddEmployee()
    {
        await EmployeeService.AddAsync(new()
            {
                FirstName = firstName,
                MiddleName = middleName,
                LastName = lastName,
                Position = position,
                NationalityCode = "Filipino",
                ReligionCode = "Born Again",
                GenderCode = "Male",
                MaritalStatusCode = "Married",
                OfficialEmail = "ervin.brosas@yahoo.com",
                EmployeeNo = 10003632
            });

        employees = await EmployeeService.GetAllAsync();
        firstName = middleName = lastName = position = string.Empty;

    }

    private async Task HandleEditEmployee()
    {
        try
        {
            _isRunning = true;
            overlayMessage = "Entering edit mode, please wait...";
            StateHasChanged(); // immediate render

            // do your async work
            await Task.Delay(1000);

            _isEditMode = true;
            _saveBtnEnabled = true;
            _isDisabled = false;

            // Hide error message if any
            ShowHideError(false);

            #region Get all UDC group codes
            List<UserDefinedCodeGroupDTO>? udcGroupList = new(); 
            int groupID = 0;

            var resultUDC = await EmployeeService.GetUserDefinedCodeGroupAsync();
            if (resultUDC.Success)
            {
                udcGroupList = resultUDC!.Value;
            }
            else
                _errorMessage.Append(resultUDC.Error);
            #endregion

            #region Get all User-defined codes
            var result = await EmployeeService.GetUserDefinedCodeAllAsync();
            if (result.Success)
            {
                var udcData = result.Value;
                if (udcData != null && udcData.Count > 0 && udcGroupList != null)
                {
                    #region Populate Salutation dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.SALUTE.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting salutation group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _salutationList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_salutationList != null)
                            _salutationArray = _salutationList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Nationality dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.COUNTRY.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting nationality group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _countryList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_countryList != null)
                            _countryArray = _countryList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Religion dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.RELIGION.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting religion group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _religionList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_religionList != null)
                            _religionArray = _religionList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Marital Status dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.MARSTAT.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting marital status group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _maritalStatusList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_maritalStatusList != null)
                            _maritalStatusArray = _maritalStatusList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Gender dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.GENDER.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting gender group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _genderList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_genderList != null)
                            _genderArray = _genderList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Employee Status dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.EMPSTATUS.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting employee status group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _employeeStatusList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_employeeStatusList != null)
                            _employeeStatusArray = _employeeStatusList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Employee Class dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.EMPCLASS.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting employee status group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _employeeClassList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_employeeClassList != null)
                            _employeeClassArray = _employeeClassList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Education Level dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.EDUCLEVEL.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting education level group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _educationLevelList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_educationLevelList != null)
                            _educationLevelArray = _educationLevelList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Bank Account Type dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.ACCOUNTTYPE.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting account types group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _accountTypeList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_accountTypeList != null)
                            _accountTypeArray = _accountTypeList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Bank Names dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.BANKNAME.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting bank names group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _bankList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_bankList != null)
                            _bankArray = _bankList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Job Titles dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.JOBTITLE.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting job title group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _jobTitleList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_jobTitleList != null)
                            _jobTitleArray = _jobTitleList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Pay Grades dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.PAYGRADE.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting pay grade group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _payGradeList = udcData.Where(a => a.GroupID == groupID).OrderBy(a => a.SequenceNo).ToList();
                        if (_payGradeList != null)
                            _payGradeArray = _payGradeList.Select(s => s.UDCDesc1).ToArray();
                    }
                    #endregion

                    #region Populate Company Branches dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.COMPANYBRANCH.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting company branch group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _companyBranchList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_companyBranchList != null)
                            _companyBranchArray = _companyBranchList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Visa Type dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.VISATYPE.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting visa types group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _visaTypeList = udcData.Where(a => a.GroupID == groupID).ToList();
                        if (_visaTypeList != null)
                            _visaTypeArray = _visaTypeList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                    }
                    #endregion

                    #region Populate Department dropdown
                    bool isDepartmentExist = false;
                    if (!string.IsNullOrEmpty(DepartmentCacheKey))
                    {
                        isDepartmentExist = await AppCacheService.CheckIfKeyExistAsync(DepartmentCacheKey);

                    }
                    if (isDepartmentExist)
                    {
                        _departmentList = await AppCacheService.GetDepartmentsAsync(DepartmentCacheKey);
                    }
                    else
                    {
                        // Get department frrom DB
                        var deptResult = await LookupCache.GetDepartmentMasterAsync();
                        if (deptResult.Success)
                        {
                            _departmentList = deptResult.Value!;
                        }
                        else
                        {
                            // Set the error message
                            _errorMessage.AppendLine(deptResult.Error);
                        }
                    }

                    if (_departmentList != null && _departmentList.Count > 0)
                        _departmentArray = _departmentList.Select(d => d.DepartmentName).OrderBy(d => d).ToArray();
                    #endregion

                    #region Populate Reporting Manager dropdown
                    bool isEmployeeExist = false;
                    if (!string.IsNullOrEmpty(EmployeeCacheKey))
                    {
                        isEmployeeExist = await AppCacheService.CheckIfKeyExistAsync(EmployeeCacheKey);

                    }
                    if (isEmployeeExist)
                    {
                        _managerList = await AppCacheService.GetEmployeesAsync(EmployeeCacheKey);
                    }
                    else
                    {
                        // Get reporting managers from DB
                        var managerResult = await LookupCache.GetReportingManagerAsync();
                        if (managerResult.Success)
                        {
                            _managerList = managerResult.Value!;
                        }
                        else
                        {
                            // Set the error message
                            _errorMessage.AppendLine(managerResult.Error);
                        }
                    }

                    if (_managerList != null && _managerList.Count > 0)
                        _managerArray = _managerList.Select(d => d.EmployeeFullName).OrderBy(d => d).ToArray();
                    #endregion

                    #region Populate Employment Type dropdown
                    // Get employent types from DB
                    var employTypeResult = await LookupCache.GetEmploymentTypeAsync();
                    if (employTypeResult.Success)
                    {
                        _employmentTypeList = employTypeResult.Value!;
                    }
                    else
                    {
                        // Set the error message
                        _errorMessage.AppendLine(employTypeResult.Error);
                    }

                    if (_employmentTypeList != null && _employmentTypeList.Count > 0)
                        _employmentTypeArray = _employmentTypeList.Select(d => d.UDCDesc1).OrderBy(d => d).ToArray();
                    #endregion

                    #region Populate Attendance Modes dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.ATTENDANCEMODE.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting attendance modes group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _attendanceModeList = udcData.Where(a => a.GroupID == groupID).OrderBy(a => a.SequenceNo).ToList();
                        if (_attendanceModeList != null)
                            _attendanceModeArray = _attendanceModeList.Select(d => d.UDCDesc1).OrderBy(d => d).ToArray();
                    }
                    #endregion

                    #region Populate Role Types dropdown
                    try                     
                    {
                        groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.ROLETYPES.ToString()).FirstOrDefault()!.UDCGroupId;
                    }
                    catch (Exception ex)
                    {
                        _errorMessage.Append($"Error getting Role Types group ID: {ex.Message}");
                    }

                    if (groupID > 0)
                    {
                        _roleTypeList = udcData.Where(a => a.GroupID == groupID).OrderBy(a => a.SequenceNo).ToList();
                        if (_roleTypeList != null)
                            _roleTypeArray = _roleTypeList.Select(d => d.UDCDesc1).OrderBy(d => d).ToArray();
                    }
                    #endregion
                }
            }
            else
                _errorMessage.Append(result.Error);

            #endregion
        }
        catch (Exception ex)
        {
            overlayMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isRunning = false;     // ✅ must execute
            StateHasChanged();      // ✅ must re-render
        }
    }

    private async Task PopulateDropDownBoxes()
    {
        #region Get all UDC group codes
        List<UserDefinedCodeGroupDTO>? udcGroupList = new(); 
        int groupID = 0;

        var resultUDC = await EmployeeService.GetUserDefinedCodeGroupAsync();
        if (resultUDC.Success)
        {
            udcGroupList = resultUDC!.Value;
        }
        else
            _errorMessage.Append(resultUDC.Error);
        #endregion

        #region Get all User-defined codes
        var result = await EmployeeService.GetUserDefinedCodeAllAsync();
        if (result.Success)
        {
            var udcData = result.Value;
            if (udcData != null && udcData.Count > 0 && udcGroupList != null)
            {
                #region Populate Salutation dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.SALUTE.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting salutation group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _salutationList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_salutationList != null)
                        _salutationArray = _salutationList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Nationality dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.COUNTRY.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting nationality group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _countryList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_countryList != null)
                        _countryArray = _countryList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Religion dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.RELIGION.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting religion group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _religionList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_religionList != null)
                        _religionArray = _religionList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Marital Status dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.MARSTAT.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting marital status group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _maritalStatusList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_maritalStatusList != null)
                        _maritalStatusArray = _maritalStatusList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Gender dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.GENDER.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting gender group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _genderList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_genderList != null)
                        _genderArray = _genderList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Employee Status dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.EMPSTATUS.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting employee status group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _employeeStatusList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_employeeStatusList != null)
                        _employeeStatusArray = _employeeStatusList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Employee Class dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.EMPCLASS.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting employee status group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _employeeClassList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_employeeClassList != null)
                        _employeeClassArray = _employeeClassList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Education Level dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.EDUCLEVEL.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting education level group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _educationLevelList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_educationLevelList != null)
                        _educationLevelArray = _educationLevelList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Bank Account Type dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.ACCOUNTTYPE.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting account types group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _accountTypeList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_accountTypeList != null)
                        _accountTypeArray = _accountTypeList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Bank Names dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.BANKNAME.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting bank names group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _bankList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_bankList != null)
                        _bankArray = _bankList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Job Titles dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.JOBTITLE.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting job title group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _jobTitleList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_jobTitleList != null)
                        _jobTitleArray = _jobTitleList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Pay Grades dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.PAYGRADE.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting pay grade group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _payGradeList = udcData.Where(a => a.GroupID == groupID).OrderBy(a => a.SequenceNo).ToList();
                    if (_payGradeList != null)
                        _payGradeArray = _payGradeList.Select(s => s.UDCDesc1).ToArray();
                }
                #endregion

                #region Populate Company Branches dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.COMPANYBRANCH.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting company branch group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _companyBranchList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_companyBranchList != null)
                        _companyBranchArray = _companyBranchList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Visa Type dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.VISATYPE.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting visa types group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _visaTypeList = udcData.Where(a => a.GroupID == groupID).ToList();
                    if (_visaTypeList != null)
                        _visaTypeArray = _visaTypeList.Select(s => s.UDCDesc1).OrderBy(s => s).ToArray();
                }
                #endregion

                #region Populate Department dropdown
                bool isDepartmentExist = false;
                if (!string.IsNullOrEmpty(DepartmentCacheKey))
                {
                    isDepartmentExist = await AppCacheService.CheckIfKeyExistAsync(DepartmentCacheKey);

                }
                if (isDepartmentExist)
                {
                    _departmentList = await AppCacheService.GetDepartmentsAsync(DepartmentCacheKey);
                }
                else
                {
                    // Get department frrom DB
                    var deptResult = await LookupCache.GetDepartmentMasterAsync();
                    if (deptResult.Success)
                    {
                        _departmentList = deptResult.Value!;
                    }
                    else
                    {
                        // Set the error message
                        _errorMessage.AppendLine(deptResult.Error);
                    }
                }

                if (_departmentList != null && _departmentList.Count > 0)
                    _departmentArray = _departmentList.Select(d => d.DepartmentName).OrderBy(d => d).ToArray();
                #endregion

                #region Populate Reporting Manager dropdown
                bool isEmployeeExist = false;
                if (!string.IsNullOrEmpty(EmployeeCacheKey))
                {
                    isEmployeeExist = await AppCacheService.CheckIfKeyExistAsync(EmployeeCacheKey);

                }
                if (isEmployeeExist)
                {
                    _managerList = await AppCacheService.GetEmployeesAsync(EmployeeCacheKey);
                }
                else
                {
                    // Get reporting managers from DB
                    var managerResult = await LookupCache.GetReportingManagerAsync();
                    if (managerResult.Success)
                    {
                        _managerList = managerResult.Value!;
                    }
                    else
                    {
                        // Set the error message
                        _errorMessage.AppendLine(managerResult.Error);
                    }
                }

                if (_managerList != null && _managerList.Count > 0)
                    _managerArray = _managerList.Select(d => d.EmployeeFullName).OrderBy(d => d).ToArray();
                #endregion

                #region Populate Employment Type dropdown
                // Get employent types from DB
                var employTypeResult = await LookupCache.GetEmploymentTypeAsync();
                if (employTypeResult.Success)
                {
                    _employmentTypeList = employTypeResult.Value!;
                }
                else
                {
                    // Set the error message
                    _errorMessage.AppendLine(employTypeResult.Error);
                }

                if (_employmentTypeList != null && _employmentTypeList.Count > 0)
                    _employmentTypeArray = _employmentTypeList.Select(d => d.UDCDesc1).OrderBy(d => d).ToArray();
                #endregion

                #region Populate Attendance Modes dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.ATTENDANCEMODE.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting attendance modes group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _attendanceModeList = udcData.Where(a => a.GroupID == groupID).OrderBy(a => a.SequenceNo).ToList();
                    if (_attendanceModeList != null)
                        _attendanceModeArray = _attendanceModeList.Select(d => d.UDCDesc1).OrderBy(d => d).ToArray();
                }
                #endregion

                #region Populate Role Types dropdown
                try                     
                {
                    groupID = udcGroupList.Where(a => a.UDCGCode == UDCGroupCodes.ROLETYPES.ToString()).FirstOrDefault()!.UDCGroupId;
                }
                catch (Exception ex)
                {
                    _errorMessage.Append($"Error getting Role Types group ID: {ex.Message}");
                }

                if (groupID > 0)
                {
                    _roleTypeList = udcData.Where(a => a.GroupID == groupID).OrderBy(a => a.SequenceNo).ToList();
                    if (_roleTypeList != null)
                        _roleTypeArray = _roleTypeList.Select(d => d.UDCDesc1).OrderBy(d => d).ToArray();
                }
                #endregion
            }
        }
        else
            _errorMessage.Append(result.Error);

        #endregion        
    }

    private async Task EditEmployeeAsync(Func<Task> callback)
    {
        // Wait for 1 second then gives control back to the runtime
        await Task.Delay(1000);

        // Set flags
        _isEditMode = true;
        _isDisabled = false;

        if (callback != null)
        {
            // Hide the spinner overlay
            await callback.Invoke();
        }
    }               

    private async Task<IEnumerable<string>> SearchSalutation(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _salutationArray!;
        }

        return _salutationArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchReligion(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _religionArray!;
        }

        return _religionArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchCountry(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _countryArray!;
        }

        return _countryArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchGender(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _genderArray!;
        }

        return _genderArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchMaritalStatus(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _maritalStatusArray!;
        }

        return _maritalStatusArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchEmployeeStatus(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _employeeStatusArray!;
        }

        return _employeeStatusArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchEmployeeClass(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _employeeClassArray!;
        }

        return _employeeClassArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchEducationLevel(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _educationLevelArray!;
        }

        return _educationLevelArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchAccountType(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _accountTypeArray!;
        }

        return _accountTypeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchBankName(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _bankArray!;
        }

        return _bankArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchDepartment(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _departmentArray!;
        }

        return _departmentArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchReportingManager(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _managerArray!;
        }

        return _managerArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchJobTitle(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _jobTitleArray!;
        }

        return _jobTitleArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchPayGrade(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _payGradeArray!;
        }

        return _payGradeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchCompanyBranch(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _companyBranchArray!;
        }

        return _companyBranchArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchVisaType(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _visaTypeArray!;
        }

        return _visaTypeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchNationalIDType(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _nationalIDTypeArray!;
        }

        return _nationalIDTypeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchEmploymentType(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _employmentTypeArray!;
        }

        return _employmentTypeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchAttendanceMode(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _attendanceModeArray!;
        }

        return _attendanceModeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchRoleType(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return _roleTypeArray!;
        }

        return _roleTypeArray!.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    #endregion       
}

